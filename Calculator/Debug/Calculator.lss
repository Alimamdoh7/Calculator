
Calculator.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000d68  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000056  00800060  00000d68  00000dfc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000050  008000b6  008000b6  00000e52  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000e52  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000e84  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001a0  00000000  00000000  00000ec0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001b95  00000000  00000000  00001060  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c1e  00000000  00000000  00002bf5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000ffe  00000000  00000000  00003813  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000031c  00000000  00000000  00004814  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000007cb  00000000  00000000  00004b30  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001211  00000000  00000000  000052fb  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000110  00000000  00000000  0000650c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 e6       	ldi	r30, 0x68	; 104
  68:	fd e0       	ldi	r31, 0x0D	; 13
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a6 3b       	cpi	r26, 0xB6	; 182
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	21 e0       	ldi	r18, 0x01	; 1
  78:	a6 eb       	ldi	r26, 0xB6	; 182
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a6 30       	cpi	r26, 0x06	; 6
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 0b 03 	call	0x616	; 0x616 <main>
  8a:	0c 94 b2 06 	jmp	0xd64	; 0xd64 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <Project_Init>:
uint8 num_cntr=0 , op_cntr=0;
uint8 i=0 , j=0;

void Project_Init (void)
{
	PORT_Init();
  92:	0e 94 c4 05 	call	0xb88	; 0xb88 <PORT_Init>
	LCD_Init();
  96:	0e 94 be 03 	call	0x77c	; 0x77c <LCD_Init>
	KeyPad_Init();
  9a:	0e 94 10 03 	call	0x620	; 0x620 <KeyPad_Init>
	LCD_GoTo(0,0);
  9e:	60 e0       	ldi	r22, 0x00	; 0
  a0:	80 e0       	ldi	r24, 0x00	; 0
  a2:	0e 94 e5 04 	call	0x9ca	; 0x9ca <LCD_GoTo>
	LCD_WriteString("Calculator");
  a6:	8c e7       	ldi	r24, 0x7C	; 124
  a8:	90 e0       	ldi	r25, 0x00	; 0
  aa:	0e 94 38 04 	call	0x870	; 0x870 <LCD_WriteString>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ae:	2f ef       	ldi	r18, 0xFF	; 255
  b0:	87 ea       	ldi	r24, 0xA7	; 167
  b2:	91 e6       	ldi	r25, 0x61	; 97
  b4:	21 50       	subi	r18, 0x01	; 1
  b6:	80 40       	sbci	r24, 0x00	; 0
  b8:	90 40       	sbci	r25, 0x00	; 0
  ba:	e1 f7       	brne	.-8      	; 0xb4 <Project_Init+0x22>
  bc:	00 c0       	rjmp	.+0      	; 0xbe <Project_Init+0x2c>
  be:	00 00       	nop
	_delay_ms(2000);
	LCD_Clear();
  c0:	0e 94 00 05 	call	0xa00	; 0xa00 <LCD_Clear>
	LCD_GoTo(0,0);
  c4:	60 e0       	ldi	r22, 0x00	; 0
  c6:	80 e0       	ldi	r24, 0x00	; 0
  c8:	0e 94 e5 04 	call	0x9ca	; 0x9ca <LCD_GoTo>
	LCD_WriteString("Made By:");
  cc:	87 e8       	ldi	r24, 0x87	; 135
  ce:	90 e0       	ldi	r25, 0x00	; 0
  d0:	0e 94 38 04 	call	0x870	; 0x870 <LCD_WriteString>
	LCD_GoTo(1,0);
  d4:	60 e0       	ldi	r22, 0x00	; 0
  d6:	81 e0       	ldi	r24, 0x01	; 1
  d8:	0e 94 e5 04 	call	0x9ca	; 0x9ca <LCD_GoTo>
	LCD_WriteString("Ali Mamdoh");
  dc:	80 e9       	ldi	r24, 0x90	; 144
  de:	90 e0       	ldi	r25, 0x00	; 0
  e0:	0e 94 38 04 	call	0x870	; 0x870 <LCD_WriteString>
  e4:	2f ef       	ldi	r18, 0xFF	; 255
  e6:	87 ea       	ldi	r24, 0xA7	; 167
  e8:	91 e6       	ldi	r25, 0x61	; 97
  ea:	21 50       	subi	r18, 0x01	; 1
  ec:	80 40       	sbci	r24, 0x00	; 0
  ee:	90 40       	sbci	r25, 0x00	; 0
  f0:	e1 f7       	brne	.-8      	; 0xea <Project_Init+0x58>
  f2:	00 c0       	rjmp	.+0      	; 0xf4 <Project_Init+0x62>
  f4:	00 00       	nop
	_delay_ms(2000);
	LCD_Clear();
  f6:	0e 94 00 05 	call	0xa00	; 0xa00 <LCD_Clear>
  fa:	08 95       	ret

000000fc <Clear_Button>:
}

void Clear_Button (void)
{
	 LCD_Clear();
  fc:	0e 94 00 05 	call	0xa00	; 0xa00 <LCD_Clear>
	 Division_By_Zero_Flag=0;
 100:	10 92 ba 00 	sts	0x00BA, r1	; 0x8000ba <Division_By_Zero_Flag>
	 op_cntr=0;
 104:	10 92 b8 00 	sts	0x00B8, r1	; 0x8000b8 <op_cntr>
	 num_cntr=0;
 108:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <num_cntr>
	 result=0;
 10c:	10 92 bb 00 	sts	0x00BB, r1	; 0x8000bb <result>
 110:	10 92 bc 00 	sts	0x00BC, r1	; 0x8000bc <result+0x1>
 114:	10 92 bd 00 	sts	0x00BD, r1	; 0x8000bd <result+0x2>
 118:	10 92 be 00 	sts	0x00BE, r1	; 0x8000be <result+0x3>
 11c:	e0 ec       	ldi	r30, 0xC0	; 192
 11e:	f0 e0       	ldi	r31, 0x00	; 0
 120:	8a ec       	ldi	r24, 0xCA	; 202
 122:	90 e0       	ldi	r25, 0x00	; 0
	 for (i=0; i<Number_Of_Operations ; i++)
	 {
		 Operations[i]=0;
 124:	11 92       	st	Z+, r1
	 LCD_Clear();
	 Division_By_Zero_Flag=0;
	 op_cntr=0;
	 num_cntr=0;
	 result=0;
	 for (i=0; i<Number_Of_Operations ; i++)
 126:	e8 17       	cp	r30, r24
 128:	f9 07       	cpc	r31, r25
 12a:	e1 f7       	brne	.-8      	; 0x124 <Clear_Button+0x28>
 12c:	8a e0       	ldi	r24, 0x0A	; 10
 12e:	80 93 b7 00 	sts	0x00B7, r24	; 0x8000b7 <i>
 132:	ea ec       	ldi	r30, 0xCA	; 202
 134:	f0 e0       	ldi	r31, 0x00	; 0
 136:	86 e0       	ldi	r24, 0x06	; 6
 138:	91 e0       	ldi	r25, 0x01	; 1
	 {
		 Operations[i]=0;
	 }
	 for (j=0 ; j<Number_Of_Operands ; j++)
	 {
		 Numbers[j]=0;
 13a:	11 92       	st	Z+, r1
 13c:	11 92       	st	Z+, r1
 13e:	11 92       	st	Z+, r1
 140:	11 92       	st	Z+, r1
	 result=0;
	 for (i=0; i<Number_Of_Operations ; i++)
	 {
		 Operations[i]=0;
	 }
	 for (j=0 ; j<Number_Of_Operands ; j++)
 142:	e8 17       	cp	r30, r24
 144:	f9 07       	cpc	r31, r25
 146:	c9 f7       	brne	.-14     	; 0x13a <Clear_Button+0x3e>
 148:	8f e0       	ldi	r24, 0x0F	; 15
 14a:	80 93 b6 00 	sts	0x00B6, r24	; 0x8000b6 <__data_end>
 14e:	08 95       	ret

00000150 <Operations_Buttons>:
	 }
}

void Operations_Buttons (void)
{
	Operations[op_cntr] = Key_Value;
 150:	80 91 b8 00 	lds	r24, 0x00B8	; 0x8000b8 <op_cntr>
 154:	e8 2f       	mov	r30, r24
 156:	f0 e0       	ldi	r31, 0x00	; 0
 158:	e0 54       	subi	r30, 0x40	; 64
 15a:	ff 4f       	sbci	r31, 0xFF	; 255
 15c:	90 91 bf 00 	lds	r25, 0x00BF	; 0x8000bf <Key_Value>
 160:	90 83       	st	Z, r25
	num_cntr++;
 162:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <num_cntr>
 166:	9f 5f       	subi	r25, 0xFF	; 255
 168:	90 93 b9 00 	sts	0x00B9, r25	; 0x8000b9 <num_cntr>
	op_cntr++;
 16c:	8f 5f       	subi	r24, 0xFF	; 255
 16e:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <op_cntr>
 172:	08 95       	ret

00000174 <Numbers_Buttons>:
}

void Numbers_Buttons (void)
{
	Numbers[num_cntr] *=10;
 174:	e0 91 b9 00 	lds	r30, 0x00B9	; 0x8000b9 <num_cntr>
 178:	f0 e0       	ldi	r31, 0x00	; 0
	Numbers[num_cntr] += (Key_Value -'0');
 17a:	ee 0f       	add	r30, r30
 17c:	ff 1f       	adc	r31, r31
 17e:	ee 0f       	add	r30, r30
 180:	ff 1f       	adc	r31, r31
 182:	e6 53       	subi	r30, 0x36	; 54
 184:	ff 4f       	sbci	r31, 0xFF	; 255
 186:	80 81       	ld	r24, Z
 188:	91 81       	ldd	r25, Z+1	; 0x01
 18a:	a2 81       	ldd	r26, Z+2	; 0x02
 18c:	b3 81       	ldd	r27, Z+3	; 0x03
 18e:	88 0f       	add	r24, r24
 190:	99 1f       	adc	r25, r25
 192:	aa 1f       	adc	r26, r26
 194:	bb 1f       	adc	r27, r27
 196:	ac 01       	movw	r20, r24
 198:	bd 01       	movw	r22, r26
 19a:	44 0f       	add	r20, r20
 19c:	55 1f       	adc	r21, r21
 19e:	66 1f       	adc	r22, r22
 1a0:	77 1f       	adc	r23, r23
 1a2:	44 0f       	add	r20, r20
 1a4:	55 1f       	adc	r21, r21
 1a6:	66 1f       	adc	r22, r22
 1a8:	77 1f       	adc	r23, r23
 1aa:	84 0f       	add	r24, r20
 1ac:	95 1f       	adc	r25, r21
 1ae:	a6 1f       	adc	r26, r22
 1b0:	b7 1f       	adc	r27, r23
 1b2:	40 91 bf 00 	lds	r20, 0x00BF	; 0x8000bf <Key_Value>
 1b6:	50 e0       	ldi	r21, 0x00	; 0
 1b8:	40 53       	subi	r20, 0x30	; 48
 1ba:	51 09       	sbc	r21, r1
 1bc:	05 2e       	mov	r0, r21
 1be:	00 0c       	add	r0, r0
 1c0:	66 0b       	sbc	r22, r22
 1c2:	77 0b       	sbc	r23, r23
 1c4:	84 0f       	add	r24, r20
 1c6:	95 1f       	adc	r25, r21
 1c8:	a6 1f       	adc	r26, r22
 1ca:	b7 1f       	adc	r27, r23
 1cc:	80 83       	st	Z, r24
 1ce:	91 83       	std	Z+1, r25	; 0x01
 1d0:	a2 83       	std	Z+2, r26	; 0x02
 1d2:	b3 83       	std	Z+3, r27	; 0x03
 1d4:	08 95       	ret

000001d6 <Division_By_Zero>:
	}
}

void Division_By_Zero (void)
{
	LCD_GoTo(1,0);
 1d6:	60 e0       	ldi	r22, 0x00	; 0
 1d8:	81 e0       	ldi	r24, 0x01	; 1
 1da:	0e 94 e5 04 	call	0x9ca	; 0x9ca <LCD_GoTo>
	LCD_WriteString("Math Error");
 1de:	8b e9       	ldi	r24, 0x9B	; 155
 1e0:	90 e0       	ldi	r25, 0x00	; 0
 1e2:	0e 94 38 04 	call	0x870	; 0x870 <LCD_WriteString>
 1e6:	2f ef       	ldi	r18, 0xFF	; 255
 1e8:	87 ea       	ldi	r24, 0xA7	; 167
 1ea:	91 e6       	ldi	r25, 0x61	; 97
 1ec:	21 50       	subi	r18, 0x01	; 1
 1ee:	80 40       	sbci	r24, 0x00	; 0
 1f0:	90 40       	sbci	r25, 0x00	; 0
 1f2:	e1 f7       	brne	.-8      	; 0x1ec <Division_By_Zero+0x16>
 1f4:	00 c0       	rjmp	.+0      	; 0x1f6 <Division_By_Zero+0x20>
 1f6:	00 00       	nop
	_delay_ms(2000);
	Division_By_Zero_Flag=0;
 1f8:	10 92 ba 00 	sts	0x00BA, r1	; 0x8000ba <Division_By_Zero_Flag>
	op_cntr=0;
 1fc:	10 92 b8 00 	sts	0x00B8, r1	; 0x8000b8 <op_cntr>
	num_cntr=0;
 200:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <num_cntr>
	result=0;
 204:	10 92 bb 00 	sts	0x00BB, r1	; 0x8000bb <result>
 208:	10 92 bc 00 	sts	0x00BC, r1	; 0x8000bc <result+0x1>
 20c:	10 92 bd 00 	sts	0x00BD, r1	; 0x8000bd <result+0x2>
 210:	10 92 be 00 	sts	0x00BE, r1	; 0x8000be <result+0x3>
 214:	e0 ec       	ldi	r30, 0xC0	; 192
 216:	f0 e0       	ldi	r31, 0x00	; 0
 218:	8a ec       	ldi	r24, 0xCA	; 202
 21a:	90 e0       	ldi	r25, 0x00	; 0
	for (i=0; i<Number_Of_Operations ; i++)
	{
		Operations[i]=0;
 21c:	11 92       	st	Z+, r1
	_delay_ms(2000);
	Division_By_Zero_Flag=0;
	op_cntr=0;
	num_cntr=0;
	result=0;
	for (i=0; i<Number_Of_Operations ; i++)
 21e:	e8 17       	cp	r30, r24
 220:	f9 07       	cpc	r31, r25
 222:	e1 f7       	brne	.-8      	; 0x21c <Division_By_Zero+0x46>
 224:	8a e0       	ldi	r24, 0x0A	; 10
 226:	80 93 b7 00 	sts	0x00B7, r24	; 0x8000b7 <i>
 22a:	ea ec       	ldi	r30, 0xCA	; 202
 22c:	f0 e0       	ldi	r31, 0x00	; 0
 22e:	86 e0       	ldi	r24, 0x06	; 6
 230:	91 e0       	ldi	r25, 0x01	; 1
	{
		Operations[i]=0;
	}
	for (j=0 ; j<Number_Of_Operands ; j++)
	{
		Numbers[j]=0;
 232:	11 92       	st	Z+, r1
 234:	11 92       	st	Z+, r1
 236:	11 92       	st	Z+, r1
 238:	11 92       	st	Z+, r1
	result=0;
	for (i=0; i<Number_Of_Operations ; i++)
	{
		Operations[i]=0;
	}
	for (j=0 ; j<Number_Of_Operands ; j++)
 23a:	e8 17       	cp	r30, r24
 23c:	f9 07       	cpc	r31, r25
 23e:	c9 f7       	brne	.-14     	; 0x232 <Division_By_Zero+0x5c>
 240:	8f e0       	ldi	r24, 0x0F	; 15
 242:	80 93 b6 00 	sts	0x00B6, r24	; 0x8000b6 <__data_end>
	{
		Numbers[j]=0;
	}
	LCD_Clear();
 246:	0e 94 00 05 	call	0xa00	; 0xa00 <LCD_Clear>
 24a:	08 95       	ret

0000024c <Multiplication>:
	}
	result = Numbers[0];	
}

void Multiplication (void)
{
 24c:	0f 93       	push	r16
 24e:	1f 93       	push	r17
 250:	cf 93       	push	r28
	Numbers[i] *=  Numbers[i+1] ;
 252:	c0 91 b7 00 	lds	r28, 0x00B7	; 0x8000b7 <i>
 256:	8c 2f       	mov	r24, r28
 258:	90 e0       	ldi	r25, 0x00	; 0
 25a:	8c 01       	movw	r16, r24
 25c:	00 0f       	add	r16, r16
 25e:	11 1f       	adc	r17, r17
 260:	00 0f       	add	r16, r16
 262:	11 1f       	adc	r17, r17
 264:	06 53       	subi	r16, 0x36	; 54
 266:	1f 4f       	sbci	r17, 0xFF	; 255
 268:	88 0f       	add	r24, r24
 26a:	99 1f       	adc	r25, r25
 26c:	88 0f       	add	r24, r24
 26e:	99 1f       	adc	r25, r25
 270:	fc 01       	movw	r30, r24
 272:	e2 53       	subi	r30, 0x32	; 50
 274:	ff 4f       	sbci	r31, 0xFF	; 255
 276:	20 81       	ld	r18, Z
 278:	31 81       	ldd	r19, Z+1	; 0x01
 27a:	42 81       	ldd	r20, Z+2	; 0x02
 27c:	53 81       	ldd	r21, Z+3	; 0x03
 27e:	f8 01       	movw	r30, r16
 280:	60 81       	ld	r22, Z
 282:	71 81       	ldd	r23, Z+1	; 0x01
 284:	82 81       	ldd	r24, Z+2	; 0x02
 286:	93 81       	ldd	r25, Z+3	; 0x03
 288:	0e 94 47 06 	call	0xc8e	; 0xc8e <__mulsi3>
 28c:	60 83       	st	Z, r22
 28e:	71 83       	std	Z+1, r23	; 0x01
 290:	82 83       	std	Z+2, r24	; 0x02
 292:	93 83       	std	Z+3, r25	; 0x03
	for (j=i; j < op_cntr ; j++)
 294:	c0 93 b6 00 	sts	0x00B6, r28	; 0x8000b6 <__data_end>
 298:	50 91 b8 00 	lds	r21, 0x00B8	; 0x8000b8 <op_cntr>
 29c:	c5 17       	cp	r28, r21
 29e:	40 f5       	brcc	.+80     	; 0x2f0 <Multiplication+0xa4>
	{
		Operations[j] = Operations[j+1];
 2a0:	8c 2f       	mov	r24, r28
 2a2:	90 e0       	ldi	r25, 0x00	; 0
 2a4:	9c 01       	movw	r18, r24
 2a6:	2f 5f       	subi	r18, 0xFF	; 255
 2a8:	3f 4f       	sbci	r19, 0xFF	; 255
 2aa:	f9 01       	movw	r30, r18
 2ac:	e0 54       	subi	r30, 0x40	; 64
 2ae:	ff 4f       	sbci	r31, 0xFF	; 255
 2b0:	40 81       	ld	r20, Z
 2b2:	fc 01       	movw	r30, r24
 2b4:	e0 54       	subi	r30, 0x40	; 64
 2b6:	ff 4f       	sbci	r31, 0xFF	; 255
 2b8:	40 83       	st	Z, r20
		Numbers[j+1] = Numbers [j+2];
 2ba:	88 0f       	add	r24, r24
 2bc:	99 1f       	adc	r25, r25
 2be:	88 0f       	add	r24, r24
 2c0:	99 1f       	adc	r25, r25
 2c2:	fc 01       	movw	r30, r24
 2c4:	ee 52       	subi	r30, 0x2E	; 46
 2c6:	ff 4f       	sbci	r31, 0xFF	; 255
 2c8:	80 81       	ld	r24, Z
 2ca:	91 81       	ldd	r25, Z+1	; 0x01
 2cc:	a2 81       	ldd	r26, Z+2	; 0x02
 2ce:	b3 81       	ldd	r27, Z+3	; 0x03
 2d0:	22 0f       	add	r18, r18
 2d2:	33 1f       	adc	r19, r19
 2d4:	22 0f       	add	r18, r18
 2d6:	33 1f       	adc	r19, r19
 2d8:	f9 01       	movw	r30, r18
 2da:	e6 53       	subi	r30, 0x36	; 54
 2dc:	ff 4f       	sbci	r31, 0xFF	; 255
 2de:	80 83       	st	Z, r24
 2e0:	91 83       	std	Z+1, r25	; 0x01
 2e2:	a2 83       	std	Z+2, r26	; 0x02
 2e4:	b3 83       	std	Z+3, r27	; 0x03
 2e6:	cf 5f       	subi	r28, 0xFF	; 255
}

void Multiplication (void)
{
	Numbers[i] *=  Numbers[i+1] ;
	for (j=i; j < op_cntr ; j++)
 2e8:	c5 13       	cpse	r28, r21
 2ea:	da cf       	rjmp	.-76     	; 0x2a0 <Multiplication+0x54>
 2ec:	50 93 b6 00 	sts	0x00B6, r21	; 0x8000b6 <__data_end>
	{
		Operations[j] = Operations[j+1];
		Numbers[j+1] = Numbers [j+2];
	}
}
 2f0:	cf 91       	pop	r28
 2f2:	1f 91       	pop	r17
 2f4:	0f 91       	pop	r16
 2f6:	08 95       	ret

000002f8 <Division>:

void Division (void)
{
 2f8:	0f 93       	push	r16
 2fa:	1f 93       	push	r17
 2fc:	cf 93       	push	r28
	if (Numbers[i+1] == 0)
 2fe:	c0 91 b7 00 	lds	r28, 0x00B7	; 0x8000b7 <i>
 302:	8c 2f       	mov	r24, r28
 304:	90 e0       	ldi	r25, 0x00	; 0
 306:	fc 01       	movw	r30, r24
 308:	ee 0f       	add	r30, r30
 30a:	ff 1f       	adc	r31, r31
 30c:	ee 0f       	add	r30, r30
 30e:	ff 1f       	adc	r31, r31
 310:	e2 53       	subi	r30, 0x32	; 50
 312:	ff 4f       	sbci	r31, 0xFF	; 255
 314:	20 81       	ld	r18, Z
 316:	31 81       	ldd	r19, Z+1	; 0x01
 318:	42 81       	ldd	r20, Z+2	; 0x02
 31a:	53 81       	ldd	r21, Z+3	; 0x03
 31c:	21 15       	cp	r18, r1
 31e:	31 05       	cpc	r19, r1
 320:	41 05       	cpc	r20, r1
 322:	51 05       	cpc	r21, r1
 324:	21 f4       	brne	.+8      	; 0x32e <Division+0x36>
	{
		Division_By_Zero_Flag=1;
 326:	81 e0       	ldi	r24, 0x01	; 1
 328:	80 93 ba 00 	sts	0x00BA, r24	; 0x8000ba <Division_By_Zero_Flag>
 32c:	13 c0       	rjmp	.+38     	; 0x354 <Division+0x5c>
	}
	else if (Numbers[i+1] != 0)
	{
		Numbers[i] /=  Numbers[i+1] ;
 32e:	88 0f       	add	r24, r24
 330:	99 1f       	adc	r25, r25
 332:	88 0f       	add	r24, r24
 334:	99 1f       	adc	r25, r25
 336:	8c 01       	movw	r16, r24
 338:	06 53       	subi	r16, 0x36	; 54
 33a:	1f 4f       	sbci	r17, 0xFF	; 255
 33c:	f8 01       	movw	r30, r16
 33e:	60 81       	ld	r22, Z
 340:	71 81       	ldd	r23, Z+1	; 0x01
 342:	82 81       	ldd	r24, Z+2	; 0x02
 344:	93 81       	ldd	r25, Z+3	; 0x03
 346:	0e 94 57 06 	call	0xcae	; 0xcae <__divmodsi4>
 34a:	f8 01       	movw	r30, r16
 34c:	20 83       	st	Z, r18
 34e:	31 83       	std	Z+1, r19	; 0x01
 350:	42 83       	std	Z+2, r20	; 0x02
 352:	53 83       	std	Z+3, r21	; 0x03
	}
	for (j = i; j<op_cntr ; j++)
 354:	c0 93 b6 00 	sts	0x00B6, r28	; 0x8000b6 <__data_end>
 358:	50 91 b8 00 	lds	r21, 0x00B8	; 0x8000b8 <op_cntr>
 35c:	c5 17       	cp	r28, r21
 35e:	40 f5       	brcc	.+80     	; 0x3b0 <Division+0xb8>
	{
		Operations[j] = Operations[j+1];
 360:	8c 2f       	mov	r24, r28
 362:	90 e0       	ldi	r25, 0x00	; 0
 364:	9c 01       	movw	r18, r24
 366:	2f 5f       	subi	r18, 0xFF	; 255
 368:	3f 4f       	sbci	r19, 0xFF	; 255
 36a:	f9 01       	movw	r30, r18
 36c:	e0 54       	subi	r30, 0x40	; 64
 36e:	ff 4f       	sbci	r31, 0xFF	; 255
 370:	40 81       	ld	r20, Z
 372:	fc 01       	movw	r30, r24
 374:	e0 54       	subi	r30, 0x40	; 64
 376:	ff 4f       	sbci	r31, 0xFF	; 255
 378:	40 83       	st	Z, r20
		Numbers[j+1] = Numbers[j+2];
 37a:	88 0f       	add	r24, r24
 37c:	99 1f       	adc	r25, r25
 37e:	88 0f       	add	r24, r24
 380:	99 1f       	adc	r25, r25
 382:	fc 01       	movw	r30, r24
 384:	ee 52       	subi	r30, 0x2E	; 46
 386:	ff 4f       	sbci	r31, 0xFF	; 255
 388:	80 81       	ld	r24, Z
 38a:	91 81       	ldd	r25, Z+1	; 0x01
 38c:	a2 81       	ldd	r26, Z+2	; 0x02
 38e:	b3 81       	ldd	r27, Z+3	; 0x03
 390:	22 0f       	add	r18, r18
 392:	33 1f       	adc	r19, r19
 394:	22 0f       	add	r18, r18
 396:	33 1f       	adc	r19, r19
 398:	f9 01       	movw	r30, r18
 39a:	e6 53       	subi	r30, 0x36	; 54
 39c:	ff 4f       	sbci	r31, 0xFF	; 255
 39e:	80 83       	st	Z, r24
 3a0:	91 83       	std	Z+1, r25	; 0x01
 3a2:	a2 83       	std	Z+2, r26	; 0x02
 3a4:	b3 83       	std	Z+3, r27	; 0x03
 3a6:	cf 5f       	subi	r28, 0xFF	; 255
	}
	else if (Numbers[i+1] != 0)
	{
		Numbers[i] /=  Numbers[i+1] ;
	}
	for (j = i; j<op_cntr ; j++)
 3a8:	c5 13       	cpse	r28, r21
 3aa:	da cf       	rjmp	.-76     	; 0x360 <Division+0x68>
 3ac:	50 93 b6 00 	sts	0x00B6, r21	; 0x8000b6 <__data_end>
	{
		Operations[j] = Operations[j+1];
		Numbers[j+1] = Numbers[j+2];
	}
}
 3b0:	cf 91       	pop	r28
 3b2:	1f 91       	pop	r17
 3b4:	0f 91       	pop	r16
 3b6:	08 95       	ret

000003b8 <MulDiv_Sequence>:
	LCD_Clear();
}

void MulDiv_Sequence (void)
{
	for (i=0 ; i < op_cntr ; i++)
 3b8:	10 92 b7 00 	sts	0x00B7, r1	; 0x8000b7 <i>
 3bc:	80 91 b8 00 	lds	r24, 0x00B8	; 0x8000b8 <op_cntr>
 3c0:	88 23       	and	r24, r24
 3c2:	09 f4       	brne	.+2      	; 0x3c6 <MulDiv_Sequence+0xe>
 3c4:	91 c0       	rjmp	.+290    	; 0x4e8 <__LOCK_REGION_LENGTH__+0xe8>
 3c6:	80 e0       	ldi	r24, 0x00	; 0
	{
		if (Operations[i] == 'x' && Operations[i+1]== '/')
 3c8:	90 e0       	ldi	r25, 0x00	; 0
 3ca:	fc 01       	movw	r30, r24
 3cc:	e0 54       	subi	r30, 0x40	; 64
 3ce:	ff 4f       	sbci	r31, 0xFF	; 255
 3d0:	20 81       	ld	r18, Z
 3d2:	28 37       	cpi	r18, 0x78	; 120
 3d4:	69 f5       	brne	.+90     	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
 3d6:	fc 01       	movw	r30, r24
 3d8:	e0 54       	subi	r30, 0x40	; 64
 3da:	ff 4f       	sbci	r31, 0xFF	; 255
 3dc:	81 81       	ldd	r24, Z+1	; 0x01
 3de:	8f 32       	cpi	r24, 0x2F	; 47
 3e0:	09 f0       	breq	.+2      	; 0x3e4 <MulDiv_Sequence+0x2c>
 3e2:	53 c0       	rjmp	.+166    	; 0x48a <__LOCK_REGION_LENGTH__+0x8a>
		{
			while (Operations[i] == 'x' && Operations[i+1] == '/')
 3e4:	80 91 b7 00 	lds	r24, 0x00B7	; 0x8000b7 <i>
 3e8:	90 e0       	ldi	r25, 0x00	; 0
 3ea:	fc 01       	movw	r30, r24
 3ec:	e0 54       	subi	r30, 0x40	; 64
 3ee:	ff 4f       	sbci	r31, 0xFF	; 255
 3f0:	20 81       	ld	r18, Z
 3f2:	28 37       	cpi	r18, 0x78	; 120
 3f4:	09 f0       	breq	.+2      	; 0x3f8 <MulDiv_Sequence+0x40>
 3f6:	6e c0       	rjmp	.+220    	; 0x4d4 <__LOCK_REGION_LENGTH__+0xd4>
 3f8:	fc 01       	movw	r30, r24
 3fa:	e0 54       	subi	r30, 0x40	; 64
 3fc:	ff 4f       	sbci	r31, 0xFF	; 255
 3fe:	81 81       	ldd	r24, Z+1	; 0x01
 400:	8f 32       	cpi	r24, 0x2F	; 47
 402:	09 f0       	breq	.+2      	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
 404:	67 c0       	rjmp	.+206    	; 0x4d4 <__LOCK_REGION_LENGTH__+0xd4>
			{
				Multiplication();
 406:	0e 94 26 01 	call	0x24c	; 0x24c <Multiplication>
				Division();
 40a:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <Division>
{
	for (i=0 ; i < op_cntr ; i++)
	{
		if (Operations[i] == 'x' && Operations[i+1]== '/')
		{
			while (Operations[i] == 'x' && Operations[i+1] == '/')
 40e:	80 91 b7 00 	lds	r24, 0x00B7	; 0x8000b7 <i>
 412:	90 e0       	ldi	r25, 0x00	; 0
 414:	fc 01       	movw	r30, r24
 416:	e0 54       	subi	r30, 0x40	; 64
 418:	ff 4f       	sbci	r31, 0xFF	; 255
 41a:	20 81       	ld	r18, Z
 41c:	28 37       	cpi	r18, 0x78	; 120
 41e:	09 f0       	breq	.+2      	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
 420:	59 c0       	rjmp	.+178    	; 0x4d4 <__LOCK_REGION_LENGTH__+0xd4>
 422:	fc 01       	movw	r30, r24
 424:	e0 54       	subi	r30, 0x40	; 64
 426:	ff 4f       	sbci	r31, 0xFF	; 255
 428:	81 81       	ldd	r24, Z+1	; 0x01
 42a:	8f 32       	cpi	r24, 0x2F	; 47
 42c:	61 f3       	breq	.-40     	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
 42e:	52 c0       	rjmp	.+164    	; 0x4d4 <__LOCK_REGION_LENGTH__+0xd4>
			{
				Multiplication();
				Division();
			}
		}
		else if (Operations[i] == '/' && Operations[i+1] == 'x')
 430:	2f 32       	cpi	r18, 0x2F	; 47
 432:	09 f0       	breq	.+2      	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
 434:	4f c0       	rjmp	.+158    	; 0x4d4 <__LOCK_REGION_LENGTH__+0xd4>
 436:	fc 01       	movw	r30, r24
 438:	e0 54       	subi	r30, 0x40	; 64
 43a:	ff 4f       	sbci	r31, 0xFF	; 255
 43c:	81 81       	ldd	r24, Z+1	; 0x01
 43e:	88 37       	cpi	r24, 0x78	; 120
 440:	b9 f5       	brne	.+110    	; 0x4b0 <__LOCK_REGION_LENGTH__+0xb0>
		{
			while (Operations [i] == '/' && Operations[i+1] == 'x')
 442:	80 91 b7 00 	lds	r24, 0x00B7	; 0x8000b7 <i>
 446:	90 e0       	ldi	r25, 0x00	; 0
 448:	fc 01       	movw	r30, r24
 44a:	e0 54       	subi	r30, 0x40	; 64
 44c:	ff 4f       	sbci	r31, 0xFF	; 255
 44e:	20 81       	ld	r18, Z
 450:	2f 32       	cpi	r18, 0x2F	; 47
 452:	09 f0       	breq	.+2      	; 0x456 <__LOCK_REGION_LENGTH__+0x56>
 454:	3f c0       	rjmp	.+126    	; 0x4d4 <__LOCK_REGION_LENGTH__+0xd4>
 456:	fc 01       	movw	r30, r24
 458:	e0 54       	subi	r30, 0x40	; 64
 45a:	ff 4f       	sbci	r31, 0xFF	; 255
 45c:	81 81       	ldd	r24, Z+1	; 0x01
 45e:	88 37       	cpi	r24, 0x78	; 120
 460:	c9 f5       	brne	.+114    	; 0x4d4 <__LOCK_REGION_LENGTH__+0xd4>
			{
				Division();
 462:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <Division>
			    Multiplication();
 466:	0e 94 26 01 	call	0x24c	; 0x24c <Multiplication>
				Division();
			}
		}
		else if (Operations[i] == '/' && Operations[i+1] == 'x')
		{
			while (Operations [i] == '/' && Operations[i+1] == 'x')
 46a:	80 91 b7 00 	lds	r24, 0x00B7	; 0x8000b7 <i>
 46e:	90 e0       	ldi	r25, 0x00	; 0
 470:	fc 01       	movw	r30, r24
 472:	e0 54       	subi	r30, 0x40	; 64
 474:	ff 4f       	sbci	r31, 0xFF	; 255
 476:	20 81       	ld	r18, Z
 478:	2f 32       	cpi	r18, 0x2F	; 47
 47a:	61 f5       	brne	.+88     	; 0x4d4 <__LOCK_REGION_LENGTH__+0xd4>
 47c:	fc 01       	movw	r30, r24
 47e:	e0 54       	subi	r30, 0x40	; 64
 480:	ff 4f       	sbci	r31, 0xFF	; 255
 482:	81 81       	ldd	r24, Z+1	; 0x01
 484:	88 37       	cpi	r24, 0x78	; 120
 486:	69 f3       	breq	.-38     	; 0x462 <__LOCK_REGION_LENGTH__+0x62>
 488:	25 c0       	rjmp	.+74     	; 0x4d4 <__LOCK_REGION_LENGTH__+0xd4>
		}
		else 
		{
			if (Operations[i] == 'x')
			{
				while (Operations [i] == 'x')
 48a:	e0 91 b7 00 	lds	r30, 0x00B7	; 0x8000b7 <i>
 48e:	f0 e0       	ldi	r31, 0x00	; 0
 490:	e0 54       	subi	r30, 0x40	; 64
 492:	ff 4f       	sbci	r31, 0xFF	; 255
 494:	80 81       	ld	r24, Z
 496:	88 37       	cpi	r24, 0x78	; 120
 498:	e9 f4       	brne	.+58     	; 0x4d4 <__LOCK_REGION_LENGTH__+0xd4>
				{
					Multiplication();
 49a:	0e 94 26 01 	call	0x24c	; 0x24c <Multiplication>
		}
		else 
		{
			if (Operations[i] == 'x')
			{
				while (Operations [i] == 'x')
 49e:	e0 91 b7 00 	lds	r30, 0x00B7	; 0x8000b7 <i>
 4a2:	f0 e0       	ldi	r31, 0x00	; 0
 4a4:	e0 54       	subi	r30, 0x40	; 64
 4a6:	ff 4f       	sbci	r31, 0xFF	; 255
 4a8:	80 81       	ld	r24, Z
 4aa:	88 37       	cpi	r24, 0x78	; 120
 4ac:	b1 f3       	breq	.-20     	; 0x49a <__LOCK_REGION_LENGTH__+0x9a>
 4ae:	12 c0       	rjmp	.+36     	; 0x4d4 <__LOCK_REGION_LENGTH__+0xd4>
					Multiplication();
				}
			}
			else if (Operations[i] == '/')
			{
				while (Operations [i] == '/')
 4b0:	e0 91 b7 00 	lds	r30, 0x00B7	; 0x8000b7 <i>
 4b4:	f0 e0       	ldi	r31, 0x00	; 0
 4b6:	e0 54       	subi	r30, 0x40	; 64
 4b8:	ff 4f       	sbci	r31, 0xFF	; 255
 4ba:	80 81       	ld	r24, Z
 4bc:	8f 32       	cpi	r24, 0x2F	; 47
 4be:	51 f4       	brne	.+20     	; 0x4d4 <__LOCK_REGION_LENGTH__+0xd4>
				{
					Division();
 4c0:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <Division>
					Multiplication();
				}
			}
			else if (Operations[i] == '/')
			{
				while (Operations [i] == '/')
 4c4:	e0 91 b7 00 	lds	r30, 0x00B7	; 0x8000b7 <i>
 4c8:	f0 e0       	ldi	r31, 0x00	; 0
 4ca:	e0 54       	subi	r30, 0x40	; 64
 4cc:	ff 4f       	sbci	r31, 0xFF	; 255
 4ce:	80 81       	ld	r24, Z
 4d0:	8f 32       	cpi	r24, 0x2F	; 47
 4d2:	b1 f3       	breq	.-20     	; 0x4c0 <__LOCK_REGION_LENGTH__+0xc0>
	LCD_Clear();
}

void MulDiv_Sequence (void)
{
	for (i=0 ; i < op_cntr ; i++)
 4d4:	80 91 b7 00 	lds	r24, 0x00B7	; 0x8000b7 <i>
 4d8:	8f 5f       	subi	r24, 0xFF	; 255
 4da:	80 93 b7 00 	sts	0x00B7, r24	; 0x8000b7 <i>
 4de:	90 91 b8 00 	lds	r25, 0x00B8	; 0x8000b8 <op_cntr>
 4e2:	89 17       	cp	r24, r25
 4e4:	08 f4       	brcc	.+2      	; 0x4e8 <__LOCK_REGION_LENGTH__+0xe8>
 4e6:	70 cf       	rjmp	.-288    	; 0x3c8 <MulDiv_Sequence+0x10>
					Division();
				}
			}
		}
	}
	result = Numbers[0];	
 4e8:	80 91 ca 00 	lds	r24, 0x00CA	; 0x8000ca <Numbers>
 4ec:	90 91 cb 00 	lds	r25, 0x00CB	; 0x8000cb <Numbers+0x1>
 4f0:	a0 91 cc 00 	lds	r26, 0x00CC	; 0x8000cc <Numbers+0x2>
 4f4:	b0 91 cd 00 	lds	r27, 0x00CD	; 0x8000cd <Numbers+0x3>
 4f8:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <result>
 4fc:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <result+0x1>
 500:	a0 93 bd 00 	sts	0x00BD, r26	; 0x8000bd <result+0x2>
 504:	b0 93 be 00 	sts	0x00BE, r27	; 0x8000be <result+0x3>
 508:	08 95       	ret

0000050a <SumSub_Sequence>:
		Numbers[j+1] = Numbers[j+2];
	}
}

void SumSub_Sequence (void)
{
 50a:	cf 92       	push	r12
 50c:	df 92       	push	r13
 50e:	ef 92       	push	r14
 510:	ff 92       	push	r15
	for(i = 0 ; i < op_cntr; i++)
 512:	10 92 b7 00 	sts	0x00B7, r1	; 0x8000b7 <i>
 516:	90 91 b8 00 	lds	r25, 0x00B8	; 0x8000b8 <op_cntr>
 51a:	99 23       	and	r25, r25
 51c:	b9 f1       	breq	.+110    	; 0x58c <SumSub_Sequence+0x82>
 51e:	40 91 bb 00 	lds	r20, 0x00BB	; 0x8000bb <result>
 522:	50 91 bc 00 	lds	r21, 0x00BC	; 0x8000bc <result+0x1>
 526:	60 91 bd 00 	lds	r22, 0x00BD	; 0x8000bd <result+0x2>
 52a:	70 91 be 00 	lds	r23, 0x00BE	; 0x8000be <result+0x3>
 52e:	e0 ec       	ldi	r30, 0xC0	; 192
 530:	f0 e0       	ldi	r31, 0x00	; 0
 532:	ae ec       	ldi	r26, 0xCE	; 206
 534:	b0 e0       	ldi	r27, 0x00	; 0
 536:	2f ef       	ldi	r18, 0xFF	; 255
 538:	29 0f       	add	r18, r25
 53a:	30 e0       	ldi	r19, 0x00	; 0
 53c:	2f 53       	subi	r18, 0x3F	; 63
 53e:	3f 4f       	sbci	r19, 0xFF	; 255
	{
		if(Operations[i] == '+')
 540:	81 91       	ld	r24, Z+
 542:	8b 32       	cpi	r24, 0x2B	; 43
 544:	51 f4       	brne	.+20     	; 0x55a <SumSub_Sequence+0x50>
		result += Numbers[i+1];
 546:	cd 90       	ld	r12, X+
 548:	dd 90       	ld	r13, X+
 54a:	ed 90       	ld	r14, X+
 54c:	fc 90       	ld	r15, X
 54e:	13 97       	sbiw	r26, 0x03	; 3
 550:	4c 0d       	add	r20, r12
 552:	5d 1d       	adc	r21, r13
 554:	6e 1d       	adc	r22, r14
 556:	7f 1d       	adc	r23, r15
 558:	0b c0       	rjmp	.+22     	; 0x570 <SumSub_Sequence+0x66>

		else if (Operations[i] == '-')
 55a:	8d 32       	cpi	r24, 0x2D	; 45
 55c:	49 f4       	brne	.+18     	; 0x570 <SumSub_Sequence+0x66>
		result -= Numbers[i+1];
 55e:	cd 90       	ld	r12, X+
 560:	dd 90       	ld	r13, X+
 562:	ed 90       	ld	r14, X+
 564:	fc 90       	ld	r15, X
 566:	13 97       	sbiw	r26, 0x03	; 3
 568:	4c 19       	sub	r20, r12
 56a:	5d 09       	sbc	r21, r13
 56c:	6e 09       	sbc	r22, r14
 56e:	7f 09       	sbc	r23, r15
 570:	14 96       	adiw	r26, 0x04	; 4
	}
}

void SumSub_Sequence (void)
{
	for(i = 0 ; i < op_cntr; i++)
 572:	e2 17       	cp	r30, r18
 574:	f3 07       	cpc	r31, r19
 576:	21 f7       	brne	.-56     	; 0x540 <SumSub_Sequence+0x36>
 578:	40 93 bb 00 	sts	0x00BB, r20	; 0x8000bb <result>
 57c:	50 93 bc 00 	sts	0x00BC, r21	; 0x8000bc <result+0x1>
 580:	60 93 bd 00 	sts	0x00BD, r22	; 0x8000bd <result+0x2>
 584:	70 93 be 00 	sts	0x00BE, r23	; 0x8000be <result+0x3>
 588:	90 93 b7 00 	sts	0x00B7, r25	; 0x8000b7 <i>
		result += Numbers[i+1];

		else if (Operations[i] == '-')
		result -= Numbers[i+1];
	}
 58c:	ff 90       	pop	r15
 58e:	ef 90       	pop	r14
 590:	df 90       	pop	r13
 592:	cf 90       	pop	r12
 594:	08 95       	ret

00000596 <Calculate>:
	 }
}

void Calculate (void)
{
	MulDiv_Sequence();
 596:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <MulDiv_Sequence>
	SumSub_Sequence();
 59a:	0e 94 85 02 	call	0x50a	; 0x50a <SumSub_Sequence>
	
	if (Division_By_Zero_Flag == 1)
 59e:	80 91 ba 00 	lds	r24, 0x00BA	; 0x8000ba <Division_By_Zero_Flag>
 5a2:	81 30       	cpi	r24, 0x01	; 1
 5a4:	19 f4       	brne	.+6      	; 0x5ac <Calculate+0x16>
	{
		Division_By_Zero();
 5a6:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <Division_By_Zero>
 5aa:	08 95       	ret
	}
	else
	{
		LCD_GoTo(1,0);
 5ac:	60 e0       	ldi	r22, 0x00	; 0
 5ae:	81 e0       	ldi	r24, 0x01	; 1
 5b0:	0e 94 e5 04 	call	0x9ca	; 0x9ca <LCD_GoTo>
		LCD_WriteInteger(result);
 5b4:	60 91 bb 00 	lds	r22, 0x00BB	; 0x8000bb <result>
 5b8:	70 91 bc 00 	lds	r23, 0x00BC	; 0x8000bc <result+0x1>
 5bc:	80 91 bd 00 	lds	r24, 0x00BD	; 0x8000bd <result+0x2>
 5c0:	90 91 be 00 	lds	r25, 0x00BE	; 0x8000be <result+0x3>
 5c4:	0e 94 54 04 	call	0x8a8	; 0x8a8 <LCD_WriteInteger>
 5c8:	08 95       	ret

000005ca <App>:
	Numbers[num_cntr] += (Key_Value -'0');
}

void App (void)
{
	 Key_Value = KeyPad_GetValue();
 5ca:	0e 94 21 03 	call	0x642	; 0x642 <KeyPad_GetValue>
 5ce:	80 93 bf 00 	sts	0x00BF, r24	; 0x8000bf <Key_Value>
	 if (Key_Value !=0)
 5d2:	88 23       	and	r24, r24
 5d4:	f9 f0       	breq	.+62     	; 0x614 <App+0x4a>
	 {
		 LCD_WriteChar(Key_Value);
 5d6:	0e 94 da 03 	call	0x7b4	; 0x7b4 <LCD_WriteChar>

		 if (Key_Value == 'x' || Key_Value == '/' || Key_Value == '+' || Key_Value == '-')
 5da:	80 91 bf 00 	lds	r24, 0x00BF	; 0x8000bf <Key_Value>
 5de:	88 37       	cpi	r24, 0x78	; 120
 5e0:	31 f0       	breq	.+12     	; 0x5ee <App+0x24>
 5e2:	98 2f       	mov	r25, r24
 5e4:	9b 7f       	andi	r25, 0xFB	; 251
 5e6:	9b 32       	cpi	r25, 0x2B	; 43
 5e8:	11 f0       	breq	.+4      	; 0x5ee <App+0x24>
 5ea:	8d 32       	cpi	r24, 0x2D	; 45
 5ec:	19 f4       	brne	.+6      	; 0x5f4 <App+0x2a>
		 {
			 Operations_Buttons();
 5ee:	0e 94 a8 00 	call	0x150	; 0x150 <Operations_Buttons>
 5f2:	08 95       	ret
		 }
		 else if (Key_Value >= '0' && Key_Value <= '9')
 5f4:	90 ed       	ldi	r25, 0xD0	; 208
 5f6:	98 0f       	add	r25, r24
 5f8:	9a 30       	cpi	r25, 0x0A	; 10
 5fa:	18 f4       	brcc	.+6      	; 0x602 <App+0x38>
		 {
			 Numbers_Buttons();
 5fc:	0e 94 ba 00 	call	0x174	; 0x174 <Numbers_Buttons>
 600:	08 95       	ret
		 }
		 else if (Key_Value == '=')
 602:	8d 33       	cpi	r24, 0x3D	; 61
 604:	19 f4       	brne	.+6      	; 0x60c <App+0x42>
		 {
			 Calculate();
 606:	0e 94 cb 02 	call	0x596	; 0x596 <Calculate>
 60a:	08 95       	ret
		 }
		 else if (Key_Value == 'c')
 60c:	83 36       	cpi	r24, 0x63	; 99
 60e:	11 f4       	brne	.+4      	; 0x614 <App+0x4a>
		 {
			Clear_Button();
 610:	0e 94 7e 00 	call	0xfc	; 0xfc <Clear_Button>
 614:	08 95       	ret

00000616 <main>:



int main(void)
{   
   Project_Init();
 616:	0e 94 49 00 	call	0x92	; 0x92 <Project_Init>
   
  while (1)
  {
	 App();
 61a:	0e 94 e5 02 	call	0x5ca	; 0x5ca <App>
 61e:	fd cf       	rjmp	.-6      	; 0x61a <main+0x4>

00000620 <KeyPad_Init>:
* \Return value:   : Std_ReturnType  E_OK
*                                    E_NOT_OK
*******************************************************************************/
void KeyPad_Init(void)
{
	DIO_WriteChannel( KEYPAD_ROW_0 , PIN_HIGH);
 620:	61 e0       	ldi	r22, 0x01	; 1
 622:	8c e0       	ldi	r24, 0x0C	; 12
 624:	0e 94 0a 05 	call	0xa14	; 0xa14 <DIO_WriteChannel>
	DIO_WriteChannel( KEYPAD_ROW_1 , PIN_HIGH);
 628:	61 e0       	ldi	r22, 0x01	; 1
 62a:	8d e0       	ldi	r24, 0x0D	; 13
 62c:	0e 94 0a 05 	call	0xa14	; 0xa14 <DIO_WriteChannel>
	DIO_WriteChannel( KEYPAD_ROW_2 , PIN_HIGH);
 630:	61 e0       	ldi	r22, 0x01	; 1
 632:	8e e0       	ldi	r24, 0x0E	; 14
 634:	0e 94 0a 05 	call	0xa14	; 0xa14 <DIO_WriteChannel>
	DIO_WriteChannel( KEYPAD_ROW_3 , PIN_HIGH);
 638:	61 e0       	ldi	r22, 0x01	; 1
 63a:	8f e0       	ldi	r24, 0x0F	; 15
 63c:	0e 94 0a 05 	call	0xa14	; 0xa14 <DIO_WriteChannel>
 640:	08 95       	ret

00000642 <KeyPad_GetValue>:
* \Parameters (out): None
* \Return value:   : Std_ReturnType  E_OK
*                                    E_NOT_OK
*******************************************************************************/
uint8 KeyPad_GetValue (void)
{
 642:	df 92       	push	r13
 644:	ef 92       	push	r14
 646:	ff 92       	push	r15
 648:	0f 93       	push	r16
 64a:	1f 93       	push	r17
 64c:	cf 93       	push	r28
 64e:	df 93       	push	r29
 650:	0f 2e       	mov	r0, r31
 652:	f6 ea       	ldi	r31, 0xA6	; 166
 654:	ef 2e       	mov	r14, r31
 656:	f0 e0       	ldi	r31, 0x00	; 0
 658:	ff 2e       	mov	r15, r31
 65a:	f0 2d       	mov	r31, r0
	uint8 ROW_LOC = 0 , COL_LOC = 0 , Button_Val = 0 , Temp_Val = 0;
 65c:	d1 2c       	mov	r13, r1
	for (ROW_LOC = KEYPAD_ROW_START ; ROW_LOC <= KEYPAD_ROW_END ; ROW_LOC++)
 65e:	dc e0       	ldi	r29, 0x0C	; 12
	{
		DIO_WriteChannel( ROW_LOC , PIN_LOW);
 660:	60 e0       	ldi	r22, 0x00	; 0
 662:	8d 2f       	mov	r24, r29
 664:	0e 94 0a 05 	call	0xa14	; 0xa14 <DIO_WriteChannel>
 668:	87 01       	movw	r16, r14
		
		for(COL_LOC= KEYPAD_COL_START ; COL_LOC <= KEYPAD_COL_END ; COL_LOC++)
 66a:	ca e1       	ldi	r28, 0x1A	; 26
		{
			Temp_Val = DIO_ReadChannel(COL_LOC);
 66c:	8c 2f       	mov	r24, r28
 66e:	0e 94 91 05 	call	0xb22	; 0xb22 <DIO_ReadChannel>
			
			if (Temp_Val == 0)
 672:	81 11       	cpse	r24, r1
 674:	0d c0       	rjmp	.+26     	; 0x690 <KeyPad_GetValue+0x4e>
			{
				Button_Val = KeyPad_Values[ROW_LOC - KEYPAD_ROW_START][COL_LOC - KEYPAD_COL_START];
 676:	f8 01       	movw	r30, r16
 678:	d0 80       	ld	r13, Z
				while(Temp_Val == 0)
				{
					Temp_Val = DIO_ReadChannel(COL_LOC);
 67a:	8c 2f       	mov	r24, r28
 67c:	0e 94 91 05 	call	0xb22	; 0xb22 <DIO_ReadChannel>
			Temp_Val = DIO_ReadChannel(COL_LOC);
			
			if (Temp_Val == 0)
			{
				Button_Val = KeyPad_Values[ROW_LOC - KEYPAD_ROW_START][COL_LOC - KEYPAD_COL_START];
				while(Temp_Val == 0)
 680:	88 23       	and	r24, r24
 682:	d9 f3       	breq	.-10     	; 0x67a <KeyPad_GetValue+0x38>
 684:	8f e3       	ldi	r24, 0x3F	; 63
 686:	9c e9       	ldi	r25, 0x9C	; 156
 688:	01 97       	sbiw	r24, 0x01	; 1
 68a:	f1 f7       	brne	.-4      	; 0x688 <KeyPad_GetValue+0x46>
 68c:	00 c0       	rjmp	.+0      	; 0x68e <KeyPad_GetValue+0x4c>
 68e:	00 00       	nop
	uint8 ROW_LOC = 0 , COL_LOC = 0 , Button_Val = 0 , Temp_Val = 0;
	for (ROW_LOC = KEYPAD_ROW_START ; ROW_LOC <= KEYPAD_ROW_END ; ROW_LOC++)
	{
		DIO_WriteChannel( ROW_LOC , PIN_LOW);
		
		for(COL_LOC= KEYPAD_COL_START ; COL_LOC <= KEYPAD_COL_END ; COL_LOC++)
 690:	cf 5f       	subi	r28, 0xFF	; 255
 692:	0f 5f       	subi	r16, 0xFF	; 255
 694:	1f 4f       	sbci	r17, 0xFF	; 255
 696:	ce 31       	cpi	r28, 0x1E	; 30
 698:	49 f7       	brne	.-46     	; 0x66c <KeyPad_GetValue+0x2a>
					Temp_Val = DIO_ReadChannel(COL_LOC);
				}
				_delay_ms(10);
			}
		}
		DIO_WriteChannel(ROW_LOC , PIN_HIGH);
 69a:	61 e0       	ldi	r22, 0x01	; 1
 69c:	8d 2f       	mov	r24, r29
 69e:	0e 94 0a 05 	call	0xa14	; 0xa14 <DIO_WriteChannel>
*                                    E_NOT_OK
*******************************************************************************/
uint8 KeyPad_GetValue (void)
{
	uint8 ROW_LOC = 0 , COL_LOC = 0 , Button_Val = 0 , Temp_Val = 0;
	for (ROW_LOC = KEYPAD_ROW_START ; ROW_LOC <= KEYPAD_ROW_END ; ROW_LOC++)
 6a2:	df 5f       	subi	r29, 0xFF	; 255
 6a4:	94 e0       	ldi	r25, 0x04	; 4
 6a6:	e9 0e       	add	r14, r25
 6a8:	f1 1c       	adc	r15, r1
 6aa:	d0 31       	cpi	r29, 0x10	; 16
 6ac:	c9 f6       	brne	.-78     	; 0x660 <KeyPad_GetValue+0x1e>
			}
		}
		DIO_WriteChannel(ROW_LOC , PIN_HIGH);
	}
	return Button_Val;
}
 6ae:	8d 2d       	mov	r24, r13
 6b0:	df 91       	pop	r29
 6b2:	cf 91       	pop	r28
 6b4:	1f 91       	pop	r17
 6b6:	0f 91       	pop	r16
 6b8:	ff 90       	pop	r15
 6ba:	ef 90       	pop	r14
 6bc:	df 90       	pop	r13
 6be:	08 95       	ret

000006c0 <LCD_WriteCommand>:
* \Parameters (out): None
* \Return value:   : Std_ReturnType  E_OK
*                                    E_NOT_OK
*******************************************************************************/
void LCD_WriteCommand(uint8 cmd)
{
 6c0:	cf 93       	push	r28
 6c2:	c8 2f       	mov	r28, r24
	DIO_WriteChannel(LCD_RS_PIN , PIN_LOW);
 6c4:	60 e0       	ldi	r22, 0x00	; 0
 6c6:	81 e0       	ldi	r24, 0x01	; 1
 6c8:	0e 94 0a 05 	call	0xa14	; 0xa14 <DIO_WriteChannel>
	DIO_WriteChannel(LCD_E_PIN , PIN_LOW);
 6cc:	60 e0       	ldi	r22, 0x00	; 0
 6ce:	82 e0       	ldi	r24, 0x02	; 2
 6d0:	0e 94 0a 05 	call	0xa14	; 0xa14 <DIO_WriteChannel>
	
	DIO_WriteChannel(LCD_D4_PIN , GET_BIT(cmd , 4));
 6d4:	c4 fb       	bst	r28, 4
 6d6:	66 27       	eor	r22, r22
 6d8:	60 f9       	bld	r22, 0
 6da:	83 e0       	ldi	r24, 0x03	; 3
 6dc:	0e 94 0a 05 	call	0xa14	; 0xa14 <DIO_WriteChannel>
	DIO_WriteChannel(LCD_D5_PIN , GET_BIT(cmd , 5));
 6e0:	c5 fb       	bst	r28, 5
 6e2:	66 27       	eor	r22, r22
 6e4:	60 f9       	bld	r22, 0
 6e6:	84 e0       	ldi	r24, 0x04	; 4
 6e8:	0e 94 0a 05 	call	0xa14	; 0xa14 <DIO_WriteChannel>
	DIO_WriteChannel(LCD_D6_PIN , GET_BIT(cmd , 6));
 6ec:	c6 fb       	bst	r28, 6
 6ee:	66 27       	eor	r22, r22
 6f0:	60 f9       	bld	r22, 0
 6f2:	85 e0       	ldi	r24, 0x05	; 5
 6f4:	0e 94 0a 05 	call	0xa14	; 0xa14 <DIO_WriteChannel>
	DIO_WriteChannel(LCD_D7_PIN , GET_BIT(cmd , 7));
 6f8:	6c 2f       	mov	r22, r28
 6fa:	66 1f       	adc	r22, r22
 6fc:	66 27       	eor	r22, r22
 6fe:	66 1f       	adc	r22, r22
 700:	86 e0       	ldi	r24, 0x06	; 6
 702:	0e 94 0a 05 	call	0xa14	; 0xa14 <DIO_WriteChannel>
	
	DIO_WriteChannel(LCD_E_PIN , PIN_HIGH);
 706:	61 e0       	ldi	r22, 0x01	; 1
 708:	82 e0       	ldi	r24, 0x02	; 2
 70a:	0e 94 0a 05 	call	0xa14	; 0xa14 <DIO_WriteChannel>
 70e:	8f e9       	ldi	r24, 0x9F	; 159
 710:	9f e0       	ldi	r25, 0x0F	; 15
 712:	01 97       	sbiw	r24, 0x01	; 1
 714:	f1 f7       	brne	.-4      	; 0x712 <LCD_WriteCommand+0x52>
 716:	00 c0       	rjmp	.+0      	; 0x718 <LCD_WriteCommand+0x58>
 718:	00 00       	nop
	_delay_ms(1);
	DIO_WriteChannel(LCD_E_PIN , PIN_LOW);
 71a:	60 e0       	ldi	r22, 0x00	; 0
 71c:	82 e0       	ldi	r24, 0x02	; 2
 71e:	0e 94 0a 05 	call	0xa14	; 0xa14 <DIO_WriteChannel>
	
	DIO_WriteChannel(LCD_D4_PIN , GET_BIT(cmd , 0));
 722:	6c 2f       	mov	r22, r28
 724:	61 70       	andi	r22, 0x01	; 1
 726:	83 e0       	ldi	r24, 0x03	; 3
 728:	0e 94 0a 05 	call	0xa14	; 0xa14 <DIO_WriteChannel>
	DIO_WriteChannel(LCD_D5_PIN , GET_BIT(cmd , 1));
 72c:	c1 fb       	bst	r28, 1
 72e:	66 27       	eor	r22, r22
 730:	60 f9       	bld	r22, 0
 732:	84 e0       	ldi	r24, 0x04	; 4
 734:	0e 94 0a 05 	call	0xa14	; 0xa14 <DIO_WriteChannel>
	DIO_WriteChannel(LCD_D6_PIN , GET_BIT(cmd , 2));
 738:	c2 fb       	bst	r28, 2
 73a:	66 27       	eor	r22, r22
 73c:	60 f9       	bld	r22, 0
 73e:	85 e0       	ldi	r24, 0x05	; 5
 740:	0e 94 0a 05 	call	0xa14	; 0xa14 <DIO_WriteChannel>
	DIO_WriteChannel(LCD_D7_PIN , GET_BIT(cmd , 3));
 744:	c3 fb       	bst	r28, 3
 746:	66 27       	eor	r22, r22
 748:	60 f9       	bld	r22, 0
 74a:	86 e0       	ldi	r24, 0x06	; 6
 74c:	0e 94 0a 05 	call	0xa14	; 0xa14 <DIO_WriteChannel>
	
	DIO_WriteChannel(LCD_E_PIN , PIN_HIGH);
 750:	61 e0       	ldi	r22, 0x01	; 1
 752:	82 e0       	ldi	r24, 0x02	; 2
 754:	0e 94 0a 05 	call	0xa14	; 0xa14 <DIO_WriteChannel>
 758:	8f e9       	ldi	r24, 0x9F	; 159
 75a:	9f e0       	ldi	r25, 0x0F	; 15
 75c:	01 97       	sbiw	r24, 0x01	; 1
 75e:	f1 f7       	brne	.-4      	; 0x75c <LCD_WriteCommand+0x9c>
 760:	00 c0       	rjmp	.+0      	; 0x762 <LCD_WriteCommand+0xa2>
 762:	00 00       	nop
	_delay_ms(1);
	DIO_WriteChannel(LCD_E_PIN , PIN_LOW);
 764:	60 e0       	ldi	r22, 0x00	; 0
 766:	82 e0       	ldi	r24, 0x02	; 2
 768:	0e 94 0a 05 	call	0xa14	; 0xa14 <DIO_WriteChannel>
 76c:	8f e1       	ldi	r24, 0x1F	; 31
 76e:	9e e4       	ldi	r25, 0x4E	; 78
 770:	01 97       	sbiw	r24, 0x01	; 1
 772:	f1 f7       	brne	.-4      	; 0x770 <LCD_WriteCommand+0xb0>
 774:	00 c0       	rjmp	.+0      	; 0x776 <LCD_WriteCommand+0xb6>
 776:	00 00       	nop
	
	_delay_ms(5);
}
 778:	cf 91       	pop	r28
 77a:	08 95       	ret

0000077c <LCD_Init>:
*******************************************************************************/
void LCD_Init(void)
{
	#if (LCD_OPERATION_MODE == 4)
	/*LCD 4 BIT MODE COMMANDS*/
	LCD_WriteCommand(0X33);
 77c:	83 e3       	ldi	r24, 0x33	; 51
 77e:	0e 94 60 03 	call	0x6c0	; 0x6c0 <LCD_WriteCommand>
	LCD_WriteCommand(0X32);
 782:	82 e3       	ldi	r24, 0x32	; 50
 784:	0e 94 60 03 	call	0x6c0	; 0x6c0 <LCD_WriteCommand>
	LCD_WriteCommand(0X28); // 2Lines and 5*8 dots
 788:	88 e2       	ldi	r24, 0x28	; 40
 78a:	0e 94 60 03 	call	0x6c0	; 0x6c0 <LCD_WriteCommand>
	
	LCD_WriteCommand(0X01); // Clear Display
 78e:	81 e0       	ldi	r24, 0x01	; 1
 790:	0e 94 60 03 	call	0x6c0	; 0x6c0 <LCD_WriteCommand>
	LCD_WriteCommand(0X06); // Increase Cursor to the Right, and Shift entire Display OFF
 794:	86 e0       	ldi	r24, 0x06	; 6
 796:	0e 94 60 03 	call	0x6c0	; 0x6c0 <LCD_WriteCommand>
	LCD_WriteCommand(0x0C); // Display ON , Cursor OFF , Cursor Blink OFF
 79a:	8c e0       	ldi	r24, 0x0C	; 12
 79c:	0e 94 60 03 	call	0x6c0	; 0x6c0 <LCD_WriteCommand>
	LCD_WriteCommand(0X02); // Return Home Instruction 
 7a0:	82 e0       	ldi	r24, 0x02	; 2
 7a2:	0e 94 60 03 	call	0x6c0	; 0x6c0 <LCD_WriteCommand>
 7a6:	8f e1       	ldi	r24, 0x1F	; 31
 7a8:	9e e4       	ldi	r25, 0x4E	; 78
 7aa:	01 97       	sbiw	r24, 0x01	; 1
 7ac:	f1 f7       	brne	.-4      	; 0x7aa <LCD_Init+0x2e>
 7ae:	00 c0       	rjmp	.+0      	; 0x7b0 <LCD_Init+0x34>
 7b0:	00 00       	nop
 7b2:	08 95       	ret

000007b4 <LCD_WriteChar>:
* \Parameters (out): None
* \Return value:   : Std_ReturnType  E_OK
*                                    E_NOT_OK
*******************************************************************************/
void LCD_WriteChar(uint8 Data)
{
 7b4:	cf 93       	push	r28
 7b6:	c8 2f       	mov	r28, r24
	DIO_WriteChannel(LCD_RS_PIN , PIN_HIGH);
 7b8:	61 e0       	ldi	r22, 0x01	; 1
 7ba:	81 e0       	ldi	r24, 0x01	; 1
 7bc:	0e 94 0a 05 	call	0xa14	; 0xa14 <DIO_WriteChannel>
	DIO_WriteChannel(LCD_E_PIN , PIN_LOW);
 7c0:	60 e0       	ldi	r22, 0x00	; 0
 7c2:	82 e0       	ldi	r24, 0x02	; 2
 7c4:	0e 94 0a 05 	call	0xa14	; 0xa14 <DIO_WriteChannel>
	
	DIO_WriteChannel(LCD_D4_PIN , GET_BIT(Data , 4));
 7c8:	c4 fb       	bst	r28, 4
 7ca:	66 27       	eor	r22, r22
 7cc:	60 f9       	bld	r22, 0
 7ce:	83 e0       	ldi	r24, 0x03	; 3
 7d0:	0e 94 0a 05 	call	0xa14	; 0xa14 <DIO_WriteChannel>
	DIO_WriteChannel(LCD_D5_PIN , GET_BIT(Data , 5));
 7d4:	c5 fb       	bst	r28, 5
 7d6:	66 27       	eor	r22, r22
 7d8:	60 f9       	bld	r22, 0
 7da:	84 e0       	ldi	r24, 0x04	; 4
 7dc:	0e 94 0a 05 	call	0xa14	; 0xa14 <DIO_WriteChannel>
	DIO_WriteChannel(LCD_D6_PIN , GET_BIT(Data , 6));
 7e0:	c6 fb       	bst	r28, 6
 7e2:	66 27       	eor	r22, r22
 7e4:	60 f9       	bld	r22, 0
 7e6:	85 e0       	ldi	r24, 0x05	; 5
 7e8:	0e 94 0a 05 	call	0xa14	; 0xa14 <DIO_WriteChannel>
	DIO_WriteChannel(LCD_D7_PIN , GET_BIT(Data , 7));
 7ec:	6c 2f       	mov	r22, r28
 7ee:	66 1f       	adc	r22, r22
 7f0:	66 27       	eor	r22, r22
 7f2:	66 1f       	adc	r22, r22
 7f4:	86 e0       	ldi	r24, 0x06	; 6
 7f6:	0e 94 0a 05 	call	0xa14	; 0xa14 <DIO_WriteChannel>
	
	DIO_WriteChannel(LCD_E_PIN , PIN_HIGH);
 7fa:	61 e0       	ldi	r22, 0x01	; 1
 7fc:	82 e0       	ldi	r24, 0x02	; 2
 7fe:	0e 94 0a 05 	call	0xa14	; 0xa14 <DIO_WriteChannel>
 802:	8f e9       	ldi	r24, 0x9F	; 159
 804:	9f e0       	ldi	r25, 0x0F	; 15
 806:	01 97       	sbiw	r24, 0x01	; 1
 808:	f1 f7       	brne	.-4      	; 0x806 <LCD_WriteChar+0x52>
 80a:	00 c0       	rjmp	.+0      	; 0x80c <LCD_WriteChar+0x58>
 80c:	00 00       	nop
	_delay_ms(1);
	DIO_WriteChannel(LCD_E_PIN , PIN_LOW);
 80e:	60 e0       	ldi	r22, 0x00	; 0
 810:	82 e0       	ldi	r24, 0x02	; 2
 812:	0e 94 0a 05 	call	0xa14	; 0xa14 <DIO_WriteChannel>
	
	DIO_WriteChannel(LCD_D4_PIN , GET_BIT(Data , 0));
 816:	6c 2f       	mov	r22, r28
 818:	61 70       	andi	r22, 0x01	; 1
 81a:	83 e0       	ldi	r24, 0x03	; 3
 81c:	0e 94 0a 05 	call	0xa14	; 0xa14 <DIO_WriteChannel>
	DIO_WriteChannel(LCD_D5_PIN , GET_BIT(Data , 1));
 820:	c1 fb       	bst	r28, 1
 822:	66 27       	eor	r22, r22
 824:	60 f9       	bld	r22, 0
 826:	84 e0       	ldi	r24, 0x04	; 4
 828:	0e 94 0a 05 	call	0xa14	; 0xa14 <DIO_WriteChannel>
	DIO_WriteChannel(LCD_D6_PIN , GET_BIT(Data , 2));
 82c:	c2 fb       	bst	r28, 2
 82e:	66 27       	eor	r22, r22
 830:	60 f9       	bld	r22, 0
 832:	85 e0       	ldi	r24, 0x05	; 5
 834:	0e 94 0a 05 	call	0xa14	; 0xa14 <DIO_WriteChannel>
	DIO_WriteChannel(LCD_D7_PIN , GET_BIT(Data , 3));
 838:	c3 fb       	bst	r28, 3
 83a:	66 27       	eor	r22, r22
 83c:	60 f9       	bld	r22, 0
 83e:	86 e0       	ldi	r24, 0x06	; 6
 840:	0e 94 0a 05 	call	0xa14	; 0xa14 <DIO_WriteChannel>
	
	DIO_WriteChannel(LCD_E_PIN , PIN_HIGH);
 844:	61 e0       	ldi	r22, 0x01	; 1
 846:	82 e0       	ldi	r24, 0x02	; 2
 848:	0e 94 0a 05 	call	0xa14	; 0xa14 <DIO_WriteChannel>
 84c:	8f e9       	ldi	r24, 0x9F	; 159
 84e:	9f e0       	ldi	r25, 0x0F	; 15
 850:	01 97       	sbiw	r24, 0x01	; 1
 852:	f1 f7       	brne	.-4      	; 0x850 <LCD_WriteChar+0x9c>
 854:	00 c0       	rjmp	.+0      	; 0x856 <LCD_WriteChar+0xa2>
 856:	00 00       	nop
	_delay_ms(1);
	DIO_WriteChannel(LCD_E_PIN , PIN_LOW);
 858:	60 e0       	ldi	r22, 0x00	; 0
 85a:	82 e0       	ldi	r24, 0x02	; 2
 85c:	0e 94 0a 05 	call	0xa14	; 0xa14 <DIO_WriteChannel>
 860:	8f e1       	ldi	r24, 0x1F	; 31
 862:	9e e4       	ldi	r25, 0x4E	; 78
 864:	01 97       	sbiw	r24, 0x01	; 1
 866:	f1 f7       	brne	.-4      	; 0x864 <__stack+0x5>
 868:	00 c0       	rjmp	.+0      	; 0x86a <__stack+0xb>
 86a:	00 00       	nop
	
	_delay_ms(5);
}
 86c:	cf 91       	pop	r28
 86e:	08 95       	ret

00000870 <LCD_WriteString>:
* \Parameters (out): None
* \Return value:   : Std_ReturnType  E_OK
*                                    E_NOT_OK
*******************************************************************************/
void LCD_WriteString(uint8* str)
{
 870:	0f 93       	push	r16
 872:	1f 93       	push	r17
 874:	cf 93       	push	r28
 876:	fc 01       	movw	r30, r24
	uint8 i=0;
	while(str[i]!='\0')
 878:	80 81       	ld	r24, Z
 87a:	88 23       	and	r24, r24
 87c:	59 f0       	breq	.+22     	; 0x894 <LCD_WriteString+0x24>
 87e:	8f 01       	movw	r16, r30
 880:	c0 e0       	ldi	r28, 0x00	; 0
	{
		LCD_WriteChar(str[i]);
 882:	0e 94 da 03 	call	0x7b4	; 0x7b4 <LCD_WriteChar>
		i++;
 886:	cf 5f       	subi	r28, 0xFF	; 255
*                                    E_NOT_OK
*******************************************************************************/
void LCD_WriteString(uint8* str)
{
	uint8 i=0;
	while(str[i]!='\0')
 888:	f8 01       	movw	r30, r16
 88a:	ec 0f       	add	r30, r28
 88c:	f1 1d       	adc	r31, r1
 88e:	80 81       	ld	r24, Z
 890:	81 11       	cpse	r24, r1
 892:	f7 cf       	rjmp	.-18     	; 0x882 <LCD_WriteString+0x12>
 894:	8f e1       	ldi	r24, 0x1F	; 31
 896:	9e e4       	ldi	r25, 0x4E	; 78
 898:	01 97       	sbiw	r24, 0x01	; 1
 89a:	f1 f7       	brne	.-4      	; 0x898 <LCD_WriteString+0x28>
 89c:	00 c0       	rjmp	.+0      	; 0x89e <LCD_WriteString+0x2e>
 89e:	00 00       	nop
	{
		LCD_WriteChar(str[i]);
		i++;
	}
	_delay_ms(5);
}
 8a0:	cf 91       	pop	r28
 8a2:	1f 91       	pop	r17
 8a4:	0f 91       	pop	r16
 8a6:	08 95       	ret

000008a8 <LCD_WriteInteger>:
* \Parameters (out): None
* \Return value:   : Std_ReturnType  E_OK
*                                    E_NOT_OK
*******************************************************************************/
void LCD_WriteInteger(sint32 num)
{
 8a8:	4f 92       	push	r4
 8aa:	5f 92       	push	r5
 8ac:	6f 92       	push	r6
 8ae:	7f 92       	push	r7
 8b0:	8f 92       	push	r8
 8b2:	9f 92       	push	r9
 8b4:	af 92       	push	r10
 8b6:	bf 92       	push	r11
 8b8:	cf 92       	push	r12
 8ba:	df 92       	push	r13
 8bc:	ef 92       	push	r14
 8be:	ff 92       	push	r15
 8c0:	6b 01       	movw	r12, r22
 8c2:	7c 01       	movw	r14, r24
	 sint32 temp = 1;
	 if(num == 0)
 8c4:	61 15       	cp	r22, r1
 8c6:	71 05       	cpc	r23, r1
 8c8:	81 05       	cpc	r24, r1
 8ca:	91 05       	cpc	r25, r1
 8cc:	51 f4       	brne	.+20     	; 0x8e2 <LCD_WriteInteger+0x3a>
	 {
		 LCD_WriteChar('0');
 8ce:	80 e3       	ldi	r24, 0x30	; 48
 8d0:	0e 94 da 03 	call	0x7b4	; 0x7b4 <LCD_WriteChar>
 8d4:	67 c0       	rjmp	.+206    	; 0x9a4 <LCD_WriteInteger+0xfc>
	 {
		 LCD_WriteChar('-');
		 num *= -1;
	 }

		 while(num > 0)
 8d6:	1c 14       	cp	r1, r12
 8d8:	1d 04       	cpc	r1, r13
 8da:	1e 04       	cpc	r1, r14
 8dc:	1f 04       	cpc	r1, r15
 8de:	7c f0       	brlt	.+30     	; 0x8fe <LCD_WriteInteger+0x56>
 8e0:	61 c0       	rjmp	.+194    	; 0x9a4 <LCD_WriteInteger+0xfc>
	 if(num == 0)
	 {
		 LCD_WriteChar('0');
	 }

	 else if(num < 0)
 8e2:	99 23       	and	r25, r25
 8e4:	c4 f7       	brge	.-16     	; 0x8d6 <LCD_WriteInteger+0x2e>
	 {
		 LCD_WriteChar('-');
 8e6:	8d e2       	ldi	r24, 0x2D	; 45
 8e8:	0e 94 da 03 	call	0x7b4	; 0x7b4 <LCD_WriteChar>
		 num *= -1;
 8ec:	f0 94       	com	r15
 8ee:	e0 94       	com	r14
 8f0:	d0 94       	com	r13
 8f2:	c0 94       	com	r12
 8f4:	c1 1c       	adc	r12, r1
 8f6:	d1 1c       	adc	r13, r1
 8f8:	e1 1c       	adc	r14, r1
 8fa:	f1 1c       	adc	r15, r1
 8fc:	ec cf       	rjmp	.-40     	; 0x8d6 <LCD_WriteInteger+0x2e>
	 }

		 while(num > 0)
 8fe:	61 e0       	ldi	r22, 0x01	; 1
 900:	70 e0       	ldi	r23, 0x00	; 0
 902:	80 e0       	ldi	r24, 0x00	; 0
 904:	90 e0       	ldi	r25, 0x00	; 0
		 {
			 temp = ((temp*10) + (num%10));
 906:	0f 2e       	mov	r0, r31
 908:	fa e0       	ldi	r31, 0x0A	; 10
 90a:	8f 2e       	mov	r8, r31
 90c:	91 2c       	mov	r9, r1
 90e:	a1 2c       	mov	r10, r1
 910:	b1 2c       	mov	r11, r1
 912:	f0 2d       	mov	r31, r0
 914:	dc 01       	movw	r26, r24
 916:	cb 01       	movw	r24, r22
 918:	88 0f       	add	r24, r24
 91a:	99 1f       	adc	r25, r25
 91c:	aa 1f       	adc	r26, r26
 91e:	bb 1f       	adc	r27, r27
 920:	2c 01       	movw	r4, r24
 922:	3d 01       	movw	r6, r26
 924:	44 0c       	add	r4, r4
 926:	55 1c       	adc	r5, r5
 928:	66 1c       	adc	r6, r6
 92a:	77 1c       	adc	r7, r7
 92c:	44 0c       	add	r4, r4
 92e:	55 1c       	adc	r5, r5
 930:	66 1c       	adc	r6, r6
 932:	77 1c       	adc	r7, r7
 934:	48 0e       	add	r4, r24
 936:	59 1e       	adc	r5, r25
 938:	6a 1e       	adc	r6, r26
 93a:	7b 1e       	adc	r7, r27
 93c:	c7 01       	movw	r24, r14
 93e:	b6 01       	movw	r22, r12
 940:	a5 01       	movw	r20, r10
 942:	94 01       	movw	r18, r8
 944:	0e 94 57 06 	call	0xcae	; 0xcae <__divmodsi4>
 948:	64 0d       	add	r22, r4
 94a:	75 1d       	adc	r23, r5
 94c:	86 1d       	adc	r24, r6
 94e:	97 1d       	adc	r25, r7
			 num /= 10;
 950:	c2 2e       	mov	r12, r18
 952:	d3 2e       	mov	r13, r19
 954:	e4 2e       	mov	r14, r20
 956:	f5 2e       	mov	r15, r21
	 {
		 LCD_WriteChar('-');
		 num *= -1;
	 }

		 while(num > 0)
 958:	1c 14       	cp	r1, r12
 95a:	1d 04       	cpc	r1, r13
 95c:	1e 04       	cpc	r1, r14
 95e:	1f 04       	cpc	r1, r15
 960:	cc f2       	brlt	.-78     	; 0x914 <LCD_WriteInteger+0x6c>
		 {
			 temp = ((temp*10) + (num%10));
			 num /= 10;
		 }

		 while(temp > 1 )
 962:	62 30       	cpi	r22, 0x02	; 2
 964:	71 05       	cpc	r23, r1
 966:	81 05       	cpc	r24, r1
 968:	91 05       	cpc	r25, r1
 96a:	e4 f0       	brlt	.+56     	; 0x9a4 <LCD_WriteInteger+0xfc>
		 {
			 LCD_WriteChar(((temp%10)+48));
 96c:	0f 2e       	mov	r0, r31
 96e:	fa e0       	ldi	r31, 0x0A	; 10
 970:	8f 2e       	mov	r8, r31
 972:	91 2c       	mov	r9, r1
 974:	a1 2c       	mov	r10, r1
 976:	b1 2c       	mov	r11, r1
 978:	f0 2d       	mov	r31, r0
 97a:	a5 01       	movw	r20, r10
 97c:	94 01       	movw	r18, r8
 97e:	0e 94 57 06 	call	0xcae	; 0xcae <__divmodsi4>
 982:	c2 2e       	mov	r12, r18
 984:	d3 2e       	mov	r13, r19
 986:	e4 2e       	mov	r14, r20
 988:	f5 2e       	mov	r15, r21
 98a:	80 e3       	ldi	r24, 0x30	; 48
 98c:	86 0f       	add	r24, r22
 98e:	0e 94 da 03 	call	0x7b4	; 0x7b4 <LCD_WriteChar>
			 temp /= 10;
 992:	6c 2d       	mov	r22, r12
 994:	7d 2d       	mov	r23, r13
 996:	8e 2d       	mov	r24, r14
 998:	9f 2d       	mov	r25, r15
		 {
			 temp = ((temp*10) + (num%10));
			 num /= 10;
		 }

		 while(temp > 1 )
 99a:	62 30       	cpi	r22, 0x02	; 2
 99c:	71 05       	cpc	r23, r1
 99e:	81 05       	cpc	r24, r1
 9a0:	91 05       	cpc	r25, r1
 9a2:	5c f7       	brge	.-42     	; 0x97a <LCD_WriteInteger+0xd2>
 9a4:	8f e1       	ldi	r24, 0x1F	; 31
 9a6:	9e e4       	ldi	r25, 0x4E	; 78
 9a8:	01 97       	sbiw	r24, 0x01	; 1
 9aa:	f1 f7       	brne	.-4      	; 0x9a8 <LCD_WriteInteger+0x100>
 9ac:	00 c0       	rjmp	.+0      	; 0x9ae <LCD_WriteInteger+0x106>
 9ae:	00 00       	nop
			 LCD_WriteChar(((temp%10)+48));
			 temp /= 10;
		 }
	 
	 _delay_ms(5);
}
 9b0:	ff 90       	pop	r15
 9b2:	ef 90       	pop	r14
 9b4:	df 90       	pop	r13
 9b6:	cf 90       	pop	r12
 9b8:	bf 90       	pop	r11
 9ba:	af 90       	pop	r10
 9bc:	9f 90       	pop	r9
 9be:	8f 90       	pop	r8
 9c0:	7f 90       	pop	r7
 9c2:	6f 90       	pop	r6
 9c4:	5f 90       	pop	r5
 9c6:	4f 90       	pop	r4
 9c8:	08 95       	ret

000009ca <LCD_GoTo>:
* \Parameters (out): None
* \Return value:   : Std_ReturnType  E_OK
*                                    E_NOT_OK
*******************************************************************************/
void LCD_GoTo(uint8 Row, uint8 Column)
{
 9ca:	cf 93       	push	r28
 9cc:	df 93       	push	r29
 9ce:	00 d0       	rcall	.+0      	; 0x9d0 <LCD_GoTo+0x6>
 9d0:	cd b7       	in	r28, 0x3d	; 61
 9d2:	de b7       	in	r29, 0x3e	; 62
	uint8 LCD_Loc[2]={0X80 , 0XC0};	
 9d4:	90 e8       	ldi	r25, 0x80	; 128
 9d6:	99 83       	std	Y+1, r25	; 0x01
 9d8:	90 ec       	ldi	r25, 0xC0	; 192
 9da:	9a 83       	std	Y+2, r25	; 0x02
	LCD_WriteCommand(LCD_Loc[Row] + Column);
 9dc:	fe 01       	movw	r30, r28
 9de:	e8 0f       	add	r30, r24
 9e0:	f1 1d       	adc	r31, r1
 9e2:	81 81       	ldd	r24, Z+1	; 0x01
 9e4:	86 0f       	add	r24, r22
 9e6:	0e 94 60 03 	call	0x6c0	; 0x6c0 <LCD_WriteCommand>
 9ea:	8f e1       	ldi	r24, 0x1F	; 31
 9ec:	9e e4       	ldi	r25, 0x4E	; 78
 9ee:	01 97       	sbiw	r24, 0x01	; 1
 9f0:	f1 f7       	brne	.-4      	; 0x9ee <LCD_GoTo+0x24>
 9f2:	00 c0       	rjmp	.+0      	; 0x9f4 <LCD_GoTo+0x2a>
 9f4:	00 00       	nop
	_delay_ms(5);
}
 9f6:	0f 90       	pop	r0
 9f8:	0f 90       	pop	r0
 9fa:	df 91       	pop	r29
 9fc:	cf 91       	pop	r28
 9fe:	08 95       	ret

00000a00 <LCD_Clear>:
*                                    E_NOT_OK
*******************************************************************************/
void LCD_Clear(void)
{
	//command to clear LCD
	LCD_WriteCommand(0X01);
 a00:	81 e0       	ldi	r24, 0x01	; 1
 a02:	0e 94 60 03 	call	0x6c0	; 0x6c0 <LCD_WriteCommand>
 a06:	8f e1       	ldi	r24, 0x1F	; 31
 a08:	9e e4       	ldi	r25, 0x4E	; 78
 a0a:	01 97       	sbiw	r24, 0x01	; 1
 a0c:	f1 f7       	brne	.-4      	; 0xa0a <LCD_Clear+0xa>
 a0e:	00 c0       	rjmp	.+0      	; 0xa10 <LCD_Clear+0x10>
 a10:	00 00       	nop
 a12:	08 95       	ret

00000a14 <DIO_WriteChannel>:
*                                    E_NOT_OK
*******************************************************************************/
void DIO_WriteChannel (uint8 Pin_Order, PIN_VAL_e Pin_Val)
{
	uint8 PORT =0, PIN=0 ;
	PORT= Pin_Order / NUMBER_OF_PORT_PINS;
 a14:	98 2f       	mov	r25, r24
 a16:	96 95       	lsr	r25
 a18:	96 95       	lsr	r25
 a1a:	96 95       	lsr	r25
	PIN=  Pin_Order  % NUMBER_OF_PORT_PINS;
 a1c:	87 70       	andi	r24, 0x07	; 7
	
	switch (Pin_Val)
 a1e:	66 23       	and	r22, r22
 a20:	09 f4       	brne	.+2      	; 0xa24 <DIO_WriteChannel+0x10>
 a22:	3f c0       	rjmp	.+126    	; 0xaa2 <DIO_WriteChannel+0x8e>
 a24:	61 30       	cpi	r22, 0x01	; 1
 a26:	09 f0       	breq	.+2      	; 0xa2a <DIO_WriteChannel+0x16>
 a28:	7b c0       	rjmp	.+246    	; 0xb20 <DIO_WriteChannel+0x10c>
	{
		case PIN_HIGH :
		switch(PORT)
 a2a:	91 30       	cpi	r25, 0x01	; 1
 a2c:	99 f0       	breq	.+38     	; 0xa54 <DIO_WriteChannel+0x40>
 a2e:	28 f0       	brcs	.+10     	; 0xa3a <DIO_WriteChannel+0x26>
 a30:	92 30       	cpi	r25, 0x02	; 2
 a32:	e9 f0       	breq	.+58     	; 0xa6e <DIO_WriteChannel+0x5a>
 a34:	93 30       	cpi	r25, 0x03	; 3
 a36:	41 f1       	breq	.+80     	; 0xa88 <DIO_WriteChannel+0x74>
 a38:	08 95       	ret
		{
			case 0:
			SET_BIT (PORTA , PIN);
 a3a:	4b b3       	in	r20, 0x1b	; 27
 a3c:	21 e0       	ldi	r18, 0x01	; 1
 a3e:	30 e0       	ldi	r19, 0x00	; 0
 a40:	b9 01       	movw	r22, r18
 a42:	02 c0       	rjmp	.+4      	; 0xa48 <DIO_WriteChannel+0x34>
 a44:	66 0f       	add	r22, r22
 a46:	77 1f       	adc	r23, r23
 a48:	8a 95       	dec	r24
 a4a:	e2 f7       	brpl	.-8      	; 0xa44 <DIO_WriteChannel+0x30>
 a4c:	cb 01       	movw	r24, r22
 a4e:	84 2b       	or	r24, r20
 a50:	8b bb       	out	0x1b, r24	; 27
			break;
 a52:	08 95       	ret
			case 1:
			SET_BIT (PORTB , PIN);
 a54:	48 b3       	in	r20, 0x18	; 24
 a56:	21 e0       	ldi	r18, 0x01	; 1
 a58:	30 e0       	ldi	r19, 0x00	; 0
 a5a:	b9 01       	movw	r22, r18
 a5c:	02 c0       	rjmp	.+4      	; 0xa62 <DIO_WriteChannel+0x4e>
 a5e:	66 0f       	add	r22, r22
 a60:	77 1f       	adc	r23, r23
 a62:	8a 95       	dec	r24
 a64:	e2 f7       	brpl	.-8      	; 0xa5e <DIO_WriteChannel+0x4a>
 a66:	cb 01       	movw	r24, r22
 a68:	84 2b       	or	r24, r20
 a6a:	88 bb       	out	0x18, r24	; 24
			break;
 a6c:	08 95       	ret
			case 2:
			SET_BIT (PORTC , PIN);
 a6e:	45 b3       	in	r20, 0x15	; 21
 a70:	21 e0       	ldi	r18, 0x01	; 1
 a72:	30 e0       	ldi	r19, 0x00	; 0
 a74:	b9 01       	movw	r22, r18
 a76:	02 c0       	rjmp	.+4      	; 0xa7c <DIO_WriteChannel+0x68>
 a78:	66 0f       	add	r22, r22
 a7a:	77 1f       	adc	r23, r23
 a7c:	8a 95       	dec	r24
 a7e:	e2 f7       	brpl	.-8      	; 0xa78 <DIO_WriteChannel+0x64>
 a80:	cb 01       	movw	r24, r22
 a82:	84 2b       	or	r24, r20
 a84:	85 bb       	out	0x15, r24	; 21
			break;
 a86:	08 95       	ret
			case 3:
			SET_BIT (PORTD , PIN);
 a88:	42 b3       	in	r20, 0x12	; 18
 a8a:	21 e0       	ldi	r18, 0x01	; 1
 a8c:	30 e0       	ldi	r19, 0x00	; 0
 a8e:	b9 01       	movw	r22, r18
 a90:	02 c0       	rjmp	.+4      	; 0xa96 <DIO_WriteChannel+0x82>
 a92:	66 0f       	add	r22, r22
 a94:	77 1f       	adc	r23, r23
 a96:	8a 95       	dec	r24
 a98:	e2 f7       	brpl	.-8      	; 0xa92 <DIO_WriteChannel+0x7e>
 a9a:	cb 01       	movw	r24, r22
 a9c:	84 2b       	or	r24, r20
 a9e:	82 bb       	out	0x12, r24	; 18
			break;
 aa0:	08 95       	ret
			break;
		}
		break;
		
		case PIN_LOW :
		switch(PORT)
 aa2:	91 30       	cpi	r25, 0x01	; 1
 aa4:	a1 f0       	breq	.+40     	; 0xace <DIO_WriteChannel+0xba>
 aa6:	28 f0       	brcs	.+10     	; 0xab2 <DIO_WriteChannel+0x9e>
 aa8:	92 30       	cpi	r25, 0x02	; 2
 aaa:	f9 f0       	breq	.+62     	; 0xaea <DIO_WriteChannel+0xd6>
 aac:	93 30       	cpi	r25, 0x03	; 3
 aae:	59 f1       	breq	.+86     	; 0xb06 <DIO_WriteChannel+0xf2>
 ab0:	08 95       	ret
		{
			case 0:
			CLR_BIT (PORTA , PIN);
 ab2:	4b b3       	in	r20, 0x1b	; 27
 ab4:	21 e0       	ldi	r18, 0x01	; 1
 ab6:	30 e0       	ldi	r19, 0x00	; 0
 ab8:	b9 01       	movw	r22, r18
 aba:	02 c0       	rjmp	.+4      	; 0xac0 <DIO_WriteChannel+0xac>
 abc:	66 0f       	add	r22, r22
 abe:	77 1f       	adc	r23, r23
 ac0:	8a 95       	dec	r24
 ac2:	e2 f7       	brpl	.-8      	; 0xabc <DIO_WriteChannel+0xa8>
 ac4:	cb 01       	movw	r24, r22
 ac6:	80 95       	com	r24
 ac8:	84 23       	and	r24, r20
 aca:	8b bb       	out	0x1b, r24	; 27
			break;
 acc:	08 95       	ret
			case 1:
			CLR_BIT (PORTB , PIN);
 ace:	48 b3       	in	r20, 0x18	; 24
 ad0:	21 e0       	ldi	r18, 0x01	; 1
 ad2:	30 e0       	ldi	r19, 0x00	; 0
 ad4:	b9 01       	movw	r22, r18
 ad6:	02 c0       	rjmp	.+4      	; 0xadc <DIO_WriteChannel+0xc8>
 ad8:	66 0f       	add	r22, r22
 ada:	77 1f       	adc	r23, r23
 adc:	8a 95       	dec	r24
 ade:	e2 f7       	brpl	.-8      	; 0xad8 <DIO_WriteChannel+0xc4>
 ae0:	cb 01       	movw	r24, r22
 ae2:	80 95       	com	r24
 ae4:	84 23       	and	r24, r20
 ae6:	88 bb       	out	0x18, r24	; 24
			break;
 ae8:	08 95       	ret
			case 2:
			CLR_BIT (PORTC , PIN);
 aea:	45 b3       	in	r20, 0x15	; 21
 aec:	21 e0       	ldi	r18, 0x01	; 1
 aee:	30 e0       	ldi	r19, 0x00	; 0
 af0:	b9 01       	movw	r22, r18
 af2:	02 c0       	rjmp	.+4      	; 0xaf8 <DIO_WriteChannel+0xe4>
 af4:	66 0f       	add	r22, r22
 af6:	77 1f       	adc	r23, r23
 af8:	8a 95       	dec	r24
 afa:	e2 f7       	brpl	.-8      	; 0xaf4 <DIO_WriteChannel+0xe0>
 afc:	cb 01       	movw	r24, r22
 afe:	80 95       	com	r24
 b00:	84 23       	and	r24, r20
 b02:	85 bb       	out	0x15, r24	; 21
			break;
 b04:	08 95       	ret
			case 3:
			CLR_BIT (PORTD , PIN);
 b06:	42 b3       	in	r20, 0x12	; 18
 b08:	21 e0       	ldi	r18, 0x01	; 1
 b0a:	30 e0       	ldi	r19, 0x00	; 0
 b0c:	b9 01       	movw	r22, r18
 b0e:	02 c0       	rjmp	.+4      	; 0xb14 <DIO_WriteChannel+0x100>
 b10:	66 0f       	add	r22, r22
 b12:	77 1f       	adc	r23, r23
 b14:	8a 95       	dec	r24
 b16:	e2 f7       	brpl	.-8      	; 0xb10 <DIO_WriteChannel+0xfc>
 b18:	cb 01       	movw	r24, r22
 b1a:	80 95       	com	r24
 b1c:	84 23       	and	r24, r20
 b1e:	82 bb       	out	0x12, r24	; 18
 b20:	08 95       	ret

00000b22 <DIO_ReadChannel>:

PIN_VAL_e DIO_ReadChannel (uint8 Pin_Order)
{
		uint8 PORT =0, PIN=0, OUTPUT_Val=0 ;
		PORT= Pin_Order / NUMBER_OF_PORT_PINS;
		PIN=  Pin_Order  % NUMBER_OF_PORT_PINS;
 b22:	28 2f       	mov	r18, r24
 b24:	27 70       	andi	r18, 0x07	; 7
		
		switch (PORT)
 b26:	86 95       	lsr	r24
 b28:	86 95       	lsr	r24
 b2a:	86 95       	lsr	r24
 b2c:	81 30       	cpi	r24, 0x01	; 1
 b2e:	79 f0       	breq	.+30     	; 0xb4e <DIO_ReadChannel+0x2c>
 b30:	28 f0       	brcs	.+10     	; 0xb3c <DIO_ReadChannel+0x1a>
 b32:	82 30       	cpi	r24, 0x02	; 2
 b34:	a9 f0       	breq	.+42     	; 0xb60 <DIO_ReadChannel+0x3e>
 b36:	83 30       	cpi	r24, 0x03	; 3
 b38:	e1 f0       	breq	.+56     	; 0xb72 <DIO_ReadChannel+0x50>
 b3a:	24 c0       	rjmp	.+72     	; 0xb84 <DIO_ReadChannel+0x62>
		{
			case 0:
			OUTPUT_Val= GET_BIT (PINA , PIN);
 b3c:	89 b3       	in	r24, 0x19	; 25
 b3e:	90 e0       	ldi	r25, 0x00	; 0
 b40:	02 c0       	rjmp	.+4      	; 0xb46 <DIO_ReadChannel+0x24>
 b42:	95 95       	asr	r25
 b44:	87 95       	ror	r24
 b46:	2a 95       	dec	r18
 b48:	e2 f7       	brpl	.-8      	; 0xb42 <DIO_ReadChannel+0x20>
 b4a:	81 70       	andi	r24, 0x01	; 1
			break;
 b4c:	08 95       	ret
			case 1:
			OUTPUT_Val= GET_BIT (PINB , PIN);
 b4e:	86 b3       	in	r24, 0x16	; 22
 b50:	90 e0       	ldi	r25, 0x00	; 0
 b52:	02 c0       	rjmp	.+4      	; 0xb58 <DIO_ReadChannel+0x36>
 b54:	95 95       	asr	r25
 b56:	87 95       	ror	r24
 b58:	2a 95       	dec	r18
 b5a:	e2 f7       	brpl	.-8      	; 0xb54 <DIO_ReadChannel+0x32>
 b5c:	81 70       	andi	r24, 0x01	; 1
			break;
 b5e:	08 95       	ret
			case 2:
			OUTPUT_Val= GET_BIT (PINC , PIN);
 b60:	83 b3       	in	r24, 0x13	; 19
 b62:	90 e0       	ldi	r25, 0x00	; 0
 b64:	02 c0       	rjmp	.+4      	; 0xb6a <DIO_ReadChannel+0x48>
 b66:	95 95       	asr	r25
 b68:	87 95       	ror	r24
 b6a:	2a 95       	dec	r18
 b6c:	e2 f7       	brpl	.-8      	; 0xb66 <DIO_ReadChannel+0x44>
 b6e:	81 70       	andi	r24, 0x01	; 1
			break;
 b70:	08 95       	ret
			case 3:
			OUTPUT_Val= GET_BIT (PIND , PIN);
 b72:	80 b3       	in	r24, 0x10	; 16
 b74:	90 e0       	ldi	r25, 0x00	; 0
 b76:	02 c0       	rjmp	.+4      	; 0xb7c <DIO_ReadChannel+0x5a>
 b78:	95 95       	asr	r25
 b7a:	87 95       	ror	r24
 b7c:	2a 95       	dec	r18
 b7e:	e2 f7       	brpl	.-8      	; 0xb78 <DIO_ReadChannel+0x56>
 b80:	81 70       	andi	r24, 0x01	; 1
			break;
 b82:	08 95       	ret
*                                    E_NOT_OK
*******************************************************************************/

PIN_VAL_e DIO_ReadChannel (uint8 Pin_Order)
{
		uint8 PORT =0, PIN=0, OUTPUT_Val=0 ;
 b84:	80 e0       	ldi	r24, 0x00	; 0
			break;
			default:
			break;
		}
		return OUTPUT_Val;
}
 b86:	08 95       	ret

00000b88 <PORT_Init>:
 */ 

#include "PORT_Core.h"

void PORT_Init(void)
{
 b88:	e0 e6       	ldi	r30, 0x60	; 96
 b8a:	f0 e0       	ldi	r31, 0x00	; 0
 b8c:	4c e7       	ldi	r20, 0x7C	; 124
 b8e:	50 e0       	ldi	r21, 0x00	; 0
					case PORT_A:
					     CLR_BIT(DDRA , PIN);
					break;
					
					case PORT_B:
					     CLR_BIT(DDRB , PIN);
 b90:	61 e0       	ldi	r22, 0x01	; 1
 b92:	70 e0       	ldi	r23, 0x00	; 0
void PORT_Init(void)
{
	uint8 cntr=0 , PORT=0 , PIN =0 , DIR= 0;
	for(cntr = 0 ; cntr < DEFINED_PINS ; cntr++ )
	{
		PORT = PORT_Initialization[cntr].PIN_NUM/NUMBER_OF_PORT_PINS;
 b94:	80 81       	ld	r24, Z
 b96:	98 2f       	mov	r25, r24
 b98:	96 95       	lsr	r25
 b9a:	96 95       	lsr	r25
 b9c:	96 95       	lsr	r25
		PIN =  PORT_Initialization[cntr].PIN_NUM%NUMBER_OF_PORT_PINS;
 b9e:	87 70       	andi	r24, 0x07	; 7
		DIR =  PORT_Initialization[cntr].DIR;
		
		switch (DIR)
 ba0:	21 81       	ldd	r18, Z+1	; 0x01
 ba2:	22 23       	and	r18, r18
 ba4:	19 f0       	breq	.+6      	; 0xbac <PORT_Init+0x24>
 ba6:	21 30       	cpi	r18, 0x01	; 1
 ba8:	c9 f1       	breq	.+114    	; 0xc1c <PORT_Init+0x94>
 baa:	6b c0       	rjmp	.+214    	; 0xc82 <PORT_Init+0xfa>
		{
			case PIN_DIR_INPUT :
			    switch (PORT)
 bac:	91 30       	cpi	r25, 0x01	; 1
 bae:	91 f0       	breq	.+36     	; 0xbd4 <PORT_Init+0x4c>
 bb0:	28 f0       	brcs	.+10     	; 0xbbc <PORT_Init+0x34>
 bb2:	92 30       	cpi	r25, 0x02	; 2
 bb4:	d9 f0       	breq	.+54     	; 0xbec <PORT_Init+0x64>
 bb6:	93 30       	cpi	r25, 0x03	; 3
 bb8:	29 f1       	breq	.+74     	; 0xc04 <PORT_Init+0x7c>
 bba:	63 c0       	rjmp	.+198    	; 0xc82 <PORT_Init+0xfa>
				{
					case PORT_A:
					     CLR_BIT(DDRA , PIN);
 bbc:	9a b3       	in	r25, 0x1a	; 26
 bbe:	9b 01       	movw	r18, r22
 bc0:	02 c0       	rjmp	.+4      	; 0xbc6 <PORT_Init+0x3e>
 bc2:	22 0f       	add	r18, r18
 bc4:	33 1f       	adc	r19, r19
 bc6:	8a 95       	dec	r24
 bc8:	e2 f7       	brpl	.-8      	; 0xbc2 <PORT_Init+0x3a>
 bca:	82 2f       	mov	r24, r18
 bcc:	80 95       	com	r24
 bce:	89 23       	and	r24, r25
 bd0:	8a bb       	out	0x1a, r24	; 26
					break;
 bd2:	57 c0       	rjmp	.+174    	; 0xc82 <PORT_Init+0xfa>
					
					case PORT_B:
					     CLR_BIT(DDRB , PIN);
 bd4:	97 b3       	in	r25, 0x17	; 23
 bd6:	9b 01       	movw	r18, r22
 bd8:	02 c0       	rjmp	.+4      	; 0xbde <PORT_Init+0x56>
 bda:	22 0f       	add	r18, r18
 bdc:	33 1f       	adc	r19, r19
 bde:	8a 95       	dec	r24
 be0:	e2 f7       	brpl	.-8      	; 0xbda <PORT_Init+0x52>
 be2:	82 2f       	mov	r24, r18
 be4:	80 95       	com	r24
 be6:	89 23       	and	r24, r25
 be8:	87 bb       	out	0x17, r24	; 23
					break;
 bea:	4b c0       	rjmp	.+150    	; 0xc82 <PORT_Init+0xfa>
					
					case PORT_C:
					     CLR_BIT(DDRC , PIN);
 bec:	94 b3       	in	r25, 0x14	; 20
 bee:	9b 01       	movw	r18, r22
 bf0:	02 c0       	rjmp	.+4      	; 0xbf6 <PORT_Init+0x6e>
 bf2:	22 0f       	add	r18, r18
 bf4:	33 1f       	adc	r19, r19
 bf6:	8a 95       	dec	r24
 bf8:	e2 f7       	brpl	.-8      	; 0xbf2 <PORT_Init+0x6a>
 bfa:	82 2f       	mov	r24, r18
 bfc:	80 95       	com	r24
 bfe:	89 23       	and	r24, r25
 c00:	84 bb       	out	0x14, r24	; 20
					break;
 c02:	3f c0       	rjmp	.+126    	; 0xc82 <PORT_Init+0xfa>
					
					case PORT_D:
					     CLR_BIT(DDRD , PIN);
 c04:	91 b3       	in	r25, 0x11	; 17
 c06:	9b 01       	movw	r18, r22
 c08:	02 c0       	rjmp	.+4      	; 0xc0e <PORT_Init+0x86>
 c0a:	22 0f       	add	r18, r18
 c0c:	33 1f       	adc	r19, r19
 c0e:	8a 95       	dec	r24
 c10:	e2 f7       	brpl	.-8      	; 0xc0a <PORT_Init+0x82>
 c12:	82 2f       	mov	r24, r18
 c14:	80 95       	com	r24
 c16:	89 23       	and	r24, r25
 c18:	81 bb       	out	0x11, r24	; 17
					break;
 c1a:	33 c0       	rjmp	.+102    	; 0xc82 <PORT_Init+0xfa>
					break;
				}
			break;
			
			case PIN_DIR_OUTPUT :
			    switch (PORT)
 c1c:	91 30       	cpi	r25, 0x01	; 1
 c1e:	89 f0       	breq	.+34     	; 0xc42 <PORT_Init+0xba>
 c20:	28 f0       	brcs	.+10     	; 0xc2c <PORT_Init+0xa4>
 c22:	92 30       	cpi	r25, 0x02	; 2
 c24:	c9 f0       	breq	.+50     	; 0xc58 <PORT_Init+0xd0>
 c26:	93 30       	cpi	r25, 0x03	; 3
 c28:	11 f1       	breq	.+68     	; 0xc6e <PORT_Init+0xe6>
 c2a:	2b c0       	rjmp	.+86     	; 0xc82 <PORT_Init+0xfa>
			    {
				    case PORT_A:
				    SET_BIT(DDRA , PIN);
 c2c:	2a b3       	in	r18, 0x1a	; 26
 c2e:	db 01       	movw	r26, r22
 c30:	02 c0       	rjmp	.+4      	; 0xc36 <PORT_Init+0xae>
 c32:	aa 0f       	add	r26, r26
 c34:	bb 1f       	adc	r27, r27
 c36:	8a 95       	dec	r24
 c38:	e2 f7       	brpl	.-8      	; 0xc32 <PORT_Init+0xaa>
 c3a:	cd 01       	movw	r24, r26
 c3c:	82 2b       	or	r24, r18
 c3e:	8a bb       	out	0x1a, r24	; 26
				    break;
 c40:	20 c0       	rjmp	.+64     	; 0xc82 <PORT_Init+0xfa>
				    
				    case PORT_B:
				    SET_BIT(DDRB , PIN);
 c42:	27 b3       	in	r18, 0x17	; 23
 c44:	db 01       	movw	r26, r22
 c46:	02 c0       	rjmp	.+4      	; 0xc4c <PORT_Init+0xc4>
 c48:	aa 0f       	add	r26, r26
 c4a:	bb 1f       	adc	r27, r27
 c4c:	8a 95       	dec	r24
 c4e:	e2 f7       	brpl	.-8      	; 0xc48 <PORT_Init+0xc0>
 c50:	cd 01       	movw	r24, r26
 c52:	82 2b       	or	r24, r18
 c54:	87 bb       	out	0x17, r24	; 23
				    break;
 c56:	15 c0       	rjmp	.+42     	; 0xc82 <PORT_Init+0xfa>
				    
				    case PORT_C:
				    SET_BIT(DDRC , PIN);
 c58:	24 b3       	in	r18, 0x14	; 20
 c5a:	db 01       	movw	r26, r22
 c5c:	02 c0       	rjmp	.+4      	; 0xc62 <PORT_Init+0xda>
 c5e:	aa 0f       	add	r26, r26
 c60:	bb 1f       	adc	r27, r27
 c62:	8a 95       	dec	r24
 c64:	e2 f7       	brpl	.-8      	; 0xc5e <PORT_Init+0xd6>
 c66:	cd 01       	movw	r24, r26
 c68:	82 2b       	or	r24, r18
 c6a:	84 bb       	out	0x14, r24	; 20
				    break;
 c6c:	0a c0       	rjmp	.+20     	; 0xc82 <PORT_Init+0xfa>
				    
				    case PORT_D:
				    SET_BIT(DDRD , PIN);
 c6e:	21 b3       	in	r18, 0x11	; 17
 c70:	db 01       	movw	r26, r22
 c72:	02 c0       	rjmp	.+4      	; 0xc78 <PORT_Init+0xf0>
 c74:	aa 0f       	add	r26, r26
 c76:	bb 1f       	adc	r27, r27
 c78:	8a 95       	dec	r24
 c7a:	e2 f7       	brpl	.-8      	; 0xc74 <PORT_Init+0xec>
 c7c:	cd 01       	movw	r24, r26
 c7e:	82 2b       	or	r24, r18
 c80:	81 bb       	out	0x11, r24	; 17
 c82:	32 96       	adiw	r30, 0x02	; 2
#include "PORT_Core.h"

void PORT_Init(void)
{
	uint8 cntr=0 , PORT=0 , PIN =0 , DIR= 0;
	for(cntr = 0 ; cntr < DEFINED_PINS ; cntr++ )
 c84:	e4 17       	cp	r30, r20
 c86:	f5 07       	cpc	r31, r21
 c88:	09 f0       	breq	.+2      	; 0xc8c <PORT_Init+0x104>
 c8a:	84 cf       	rjmp	.-248    	; 0xb94 <PORT_Init+0xc>
			
			default:
			break;
		}
	}
 c8c:	08 95       	ret

00000c8e <__mulsi3>:
 c8e:	db 01       	movw	r26, r22
 c90:	8f 93       	push	r24
 c92:	9f 93       	push	r25
 c94:	0e 94 76 06 	call	0xcec	; 0xcec <__muluhisi3>
 c98:	bf 91       	pop	r27
 c9a:	af 91       	pop	r26
 c9c:	a2 9f       	mul	r26, r18
 c9e:	80 0d       	add	r24, r0
 ca0:	91 1d       	adc	r25, r1
 ca2:	a3 9f       	mul	r26, r19
 ca4:	90 0d       	add	r25, r0
 ca6:	b2 9f       	mul	r27, r18
 ca8:	90 0d       	add	r25, r0
 caa:	11 24       	eor	r1, r1
 cac:	08 95       	ret

00000cae <__divmodsi4>:
 cae:	05 2e       	mov	r0, r21
 cb0:	97 fb       	bst	r25, 7
 cb2:	1e f4       	brtc	.+6      	; 0xcba <__divmodsi4+0xc>
 cb4:	00 94       	com	r0
 cb6:	0e 94 6e 06 	call	0xcdc	; 0xcdc <__negsi2>
 cba:	57 fd       	sbrc	r21, 7
 cbc:	07 d0       	rcall	.+14     	; 0xccc <__divmodsi4_neg2>
 cbe:	0e 94 81 06 	call	0xd02	; 0xd02 <__udivmodsi4>
 cc2:	07 fc       	sbrc	r0, 7
 cc4:	03 d0       	rcall	.+6      	; 0xccc <__divmodsi4_neg2>
 cc6:	4e f4       	brtc	.+18     	; 0xcda <__divmodsi4_exit>
 cc8:	0c 94 6e 06 	jmp	0xcdc	; 0xcdc <__negsi2>

00000ccc <__divmodsi4_neg2>:
 ccc:	50 95       	com	r21
 cce:	40 95       	com	r20
 cd0:	30 95       	com	r19
 cd2:	21 95       	neg	r18
 cd4:	3f 4f       	sbci	r19, 0xFF	; 255
 cd6:	4f 4f       	sbci	r20, 0xFF	; 255
 cd8:	5f 4f       	sbci	r21, 0xFF	; 255

00000cda <__divmodsi4_exit>:
 cda:	08 95       	ret

00000cdc <__negsi2>:
 cdc:	90 95       	com	r25
 cde:	80 95       	com	r24
 ce0:	70 95       	com	r23
 ce2:	61 95       	neg	r22
 ce4:	7f 4f       	sbci	r23, 0xFF	; 255
 ce6:	8f 4f       	sbci	r24, 0xFF	; 255
 ce8:	9f 4f       	sbci	r25, 0xFF	; 255
 cea:	08 95       	ret

00000cec <__muluhisi3>:
 cec:	0e 94 a3 06 	call	0xd46	; 0xd46 <__umulhisi3>
 cf0:	a5 9f       	mul	r26, r21
 cf2:	90 0d       	add	r25, r0
 cf4:	b4 9f       	mul	r27, r20
 cf6:	90 0d       	add	r25, r0
 cf8:	a4 9f       	mul	r26, r20
 cfa:	80 0d       	add	r24, r0
 cfc:	91 1d       	adc	r25, r1
 cfe:	11 24       	eor	r1, r1
 d00:	08 95       	ret

00000d02 <__udivmodsi4>:
 d02:	a1 e2       	ldi	r26, 0x21	; 33
 d04:	1a 2e       	mov	r1, r26
 d06:	aa 1b       	sub	r26, r26
 d08:	bb 1b       	sub	r27, r27
 d0a:	fd 01       	movw	r30, r26
 d0c:	0d c0       	rjmp	.+26     	; 0xd28 <__udivmodsi4_ep>

00000d0e <__udivmodsi4_loop>:
 d0e:	aa 1f       	adc	r26, r26
 d10:	bb 1f       	adc	r27, r27
 d12:	ee 1f       	adc	r30, r30
 d14:	ff 1f       	adc	r31, r31
 d16:	a2 17       	cp	r26, r18
 d18:	b3 07       	cpc	r27, r19
 d1a:	e4 07       	cpc	r30, r20
 d1c:	f5 07       	cpc	r31, r21
 d1e:	20 f0       	brcs	.+8      	; 0xd28 <__udivmodsi4_ep>
 d20:	a2 1b       	sub	r26, r18
 d22:	b3 0b       	sbc	r27, r19
 d24:	e4 0b       	sbc	r30, r20
 d26:	f5 0b       	sbc	r31, r21

00000d28 <__udivmodsi4_ep>:
 d28:	66 1f       	adc	r22, r22
 d2a:	77 1f       	adc	r23, r23
 d2c:	88 1f       	adc	r24, r24
 d2e:	99 1f       	adc	r25, r25
 d30:	1a 94       	dec	r1
 d32:	69 f7       	brne	.-38     	; 0xd0e <__udivmodsi4_loop>
 d34:	60 95       	com	r22
 d36:	70 95       	com	r23
 d38:	80 95       	com	r24
 d3a:	90 95       	com	r25
 d3c:	9b 01       	movw	r18, r22
 d3e:	ac 01       	movw	r20, r24
 d40:	bd 01       	movw	r22, r26
 d42:	cf 01       	movw	r24, r30
 d44:	08 95       	ret

00000d46 <__umulhisi3>:
 d46:	a2 9f       	mul	r26, r18
 d48:	b0 01       	movw	r22, r0
 d4a:	b3 9f       	mul	r27, r19
 d4c:	c0 01       	movw	r24, r0
 d4e:	a3 9f       	mul	r26, r19
 d50:	70 0d       	add	r23, r0
 d52:	81 1d       	adc	r24, r1
 d54:	11 24       	eor	r1, r1
 d56:	91 1d       	adc	r25, r1
 d58:	b2 9f       	mul	r27, r18
 d5a:	70 0d       	add	r23, r0
 d5c:	81 1d       	adc	r24, r1
 d5e:	11 24       	eor	r1, r1
 d60:	91 1d       	adc	r25, r1
 d62:	08 95       	ret

00000d64 <_exit>:
 d64:	f8 94       	cli

00000d66 <__stop_program>:
 d66:	ff cf       	rjmp	.-2      	; 0xd66 <__stop_program>
